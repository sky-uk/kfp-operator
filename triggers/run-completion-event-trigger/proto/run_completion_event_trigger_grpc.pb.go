// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package run_completion_event_trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunCompletionEventTriggerClient is the client API for RunCompletionEventTrigger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunCompletionEventTriggerClient interface {
	ProcessEventFeed(ctx context.Context, in *RunCompletionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type runCompletionEventTriggerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunCompletionEventTriggerClient(cc grpc.ClientConnInterface) RunCompletionEventTriggerClient {
	return &runCompletionEventTriggerClient{cc}
}

func (c *runCompletionEventTriggerClient) ProcessEventFeed(ctx context.Context, in *RunCompletionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/run_completion_event_trigger.RunCompletionEventTrigger/ProcessEventFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunCompletionEventTriggerServer is the server API for RunCompletionEventTrigger service.
// All implementations must embed UnimplementedRunCompletionEventTriggerServer
// for forward compatibility
type RunCompletionEventTriggerServer interface {
	ProcessEventFeed(context.Context, *RunCompletionEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedRunCompletionEventTriggerServer()
}

// UnimplementedRunCompletionEventTriggerServer must be embedded to have forward compatible implementations.
type UnimplementedRunCompletionEventTriggerServer struct {
}

func (UnimplementedRunCompletionEventTriggerServer) ProcessEventFeed(context.Context, *RunCompletionEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEventFeed not implemented")
}
func (UnimplementedRunCompletionEventTriggerServer) mustEmbedUnimplementedRunCompletionEventTriggerServer() {
}

// UnsafeRunCompletionEventTriggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunCompletionEventTriggerServer will
// result in compilation errors.
type UnsafeRunCompletionEventTriggerServer interface {
	mustEmbedUnimplementedRunCompletionEventTriggerServer()
}

func RegisterRunCompletionEventTriggerServer(s grpc.ServiceRegistrar, srv RunCompletionEventTriggerServer) {
	s.RegisterService(&RunCompletionEventTrigger_ServiceDesc, srv)
}

func _RunCompletionEventTrigger_ProcessEventFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCompletionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCompletionEventTriggerServer).ProcessEventFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run_completion_event_trigger.RunCompletionEventTrigger/ProcessEventFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCompletionEventTriggerServer).ProcessEventFeed(ctx, req.(*RunCompletionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// RunCompletionEventTrigger_ServiceDesc is the grpc.ServiceDesc for RunCompletionEventTrigger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunCompletionEventTrigger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "run_completion_event_trigger.RunCompletionEventTrigger",
	HandlerType: (*RunCompletionEventTriggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessEventFeed",
			Handler:    _RunCompletionEventTrigger_ProcessEventFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "triggers/run-completion-event-trigger/proto/run_completion_event_trigger.proto",
}
