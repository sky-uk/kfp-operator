// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nats_event_trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NATSEventTriggerClient is the client API for NATSEventTrigger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NATSEventTriggerClient interface {
	ProcessEventFeed(ctx context.Context, in *RunCompletionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nATSEventTriggerClient struct {
	cc grpc.ClientConnInterface
}

func NewNATSEventTriggerClient(cc grpc.ClientConnInterface) NATSEventTriggerClient {
	return &nATSEventTriggerClient{cc}
}

func (c *nATSEventTriggerClient) ProcessEventFeed(ctx context.Context, in *RunCompletionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nats_event_trigger.NATSEventTrigger/ProcessEventFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NATSEventTriggerServer is the server API for NATSEventTrigger service.
// All implementations must embed UnimplementedNATSEventTriggerServer
// for forward compatibility
type NATSEventTriggerServer interface {
	ProcessEventFeed(context.Context, *RunCompletionEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedNATSEventTriggerServer()
}

// UnimplementedNATSEventTriggerServer must be embedded to have forward compatible implementations.
type UnimplementedNATSEventTriggerServer struct {
}

func (UnimplementedNATSEventTriggerServer) ProcessEventFeed(context.Context, *RunCompletionEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEventFeed not implemented")
}
func (UnimplementedNATSEventTriggerServer) mustEmbedUnimplementedNATSEventTriggerServer() {}

// UnsafeNATSEventTriggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NATSEventTriggerServer will
// result in compilation errors.
type UnsafeNATSEventTriggerServer interface {
	mustEmbedUnimplementedNATSEventTriggerServer()
}

func RegisterNATSEventTriggerServer(s grpc.ServiceRegistrar, srv NATSEventTriggerServer) {
	s.RegisterService(&NATSEventTrigger_ServiceDesc, srv)
}

func _NATSEventTrigger_ProcessEventFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCompletionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NATSEventTriggerServer).ProcessEventFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats_event_trigger.NATSEventTrigger/ProcessEventFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NATSEventTriggerServer).ProcessEventFeed(ctx, req.(*RunCompletionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// NATSEventTrigger_ServiceDesc is the grpc.ServiceDesc for NATSEventTrigger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NATSEventTrigger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nats_event_trigger.NATSEventTrigger",
	HandlerType: (*NATSEventTriggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessEventFeed",
			Handler:    _NATSEventTrigger_ProcessEventFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "triggers/nats_event_trigger/proto/nats_event_trigger.proto",
}
