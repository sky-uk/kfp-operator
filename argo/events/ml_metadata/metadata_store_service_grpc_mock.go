// Code generated by MockGen. DO NOT EDIT.
// Source: ml_metadata/metadata_store_service_grpc.pb.go

// Package ml_metadata is a generated GoMock package.
package ml_metadata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMetadataStoreServiceClient is a mock of MetadataStoreServiceClient interface.
type MockMetadataStoreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataStoreServiceClientMockRecorder
}

// MockMetadataStoreServiceClientMockRecorder is the mock recorder for MockMetadataStoreServiceClient.
type MockMetadataStoreServiceClientMockRecorder struct {
	mock *MockMetadataStoreServiceClient
}

// NewMockMetadataStoreServiceClient creates a new mock instance.
func NewMockMetadataStoreServiceClient(ctrl *gomock.Controller) *MockMetadataStoreServiceClient {
	mock := &MockMetadataStoreServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataStoreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataStoreServiceClient) EXPECT() *MockMetadataStoreServiceClientMockRecorder {
	return m.recorder
}

// GetArtifactByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactByTypeAndName(ctx context.Context, in *GetArtifactByTypeAndNameRequest, opts ...grpc.CallOption) (*GetArtifactByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactByTypeAndName", varargs...)
	ret0, _ := ret[0].(*GetArtifactByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactByTypeAndName indicates an expected call of GetArtifactByTypeAndName.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactByTypeAndName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactByTypeAndName), varargs...)
}

// GetArtifactType mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactType(ctx context.Context, in *GetArtifactTypeRequest, opts ...grpc.CallOption) (*GetArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactType", varargs...)
	ret0, _ := ret[0].(*GetArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactType indicates an expected call of GetArtifactType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactType), varargs...)
}

// GetArtifactTypes mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactTypes(ctx context.Context, in *GetArtifactTypesRequest, opts ...grpc.CallOption) (*GetArtifactTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactTypes", varargs...)
	ret0, _ := ret[0].(*GetArtifactTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactTypes indicates an expected call of GetArtifactTypes.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactTypes", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactTypes), varargs...)
}

// GetArtifactTypesByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactTypesByID(ctx context.Context, in *GetArtifactTypesByIDRequest, opts ...grpc.CallOption) (*GetArtifactTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactTypesByID", varargs...)
	ret0, _ := ret[0].(*GetArtifactTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactTypesByID indicates an expected call of GetArtifactTypesByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactTypesByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactTypesByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactTypesByID), varargs...)
}

// GetArtifacts mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifacts", varargs...)
	ret0, _ := ret[0].(*GetArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifacts indicates an expected call of GetArtifacts.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifacts), varargs...)
}

// GetArtifactsByContext mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactsByContext(ctx context.Context, in *GetArtifactsByContextRequest, opts ...grpc.CallOption) (*GetArtifactsByContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByContext", varargs...)
	ret0, _ := ret[0].(*GetArtifactsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByContext indicates an expected call of GetArtifactsByContext.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByContext(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByContext", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByContext), varargs...)
}

// GetArtifactsByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactsByID(ctx context.Context, in *GetArtifactsByIDRequest, opts ...grpc.CallOption) (*GetArtifactsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByID", varargs...)
	ret0, _ := ret[0].(*GetArtifactsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByID indicates an expected call of GetArtifactsByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByID), varargs...)
}

// GetArtifactsByType mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactsByType(ctx context.Context, in *GetArtifactsByTypeRequest, opts ...grpc.CallOption) (*GetArtifactsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByType", varargs...)
	ret0, _ := ret[0].(*GetArtifactsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByType indicates an expected call of GetArtifactsByType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByType), varargs...)
}

// GetArtifactsByURI mocks base method.
func (m *MockMetadataStoreServiceClient) GetArtifactsByURI(ctx context.Context, in *GetArtifactsByURIRequest, opts ...grpc.CallOption) (*GetArtifactsByURIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByURI", varargs...)
	ret0, _ := ret[0].(*GetArtifactsByURIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByURI indicates an expected call of GetArtifactsByURI.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByURI(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByURI", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByURI), varargs...)
}

// GetChildrenContextsByContext mocks base method.
func (m *MockMetadataStoreServiceClient) GetChildrenContextsByContext(ctx context.Context, in *GetChildrenContextsByContextRequest, opts ...grpc.CallOption) (*GetChildrenContextsByContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChildrenContextsByContext", varargs...)
	ret0, _ := ret[0].(*GetChildrenContextsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenContextsByContext indicates an expected call of GetChildrenContextsByContext.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetChildrenContextsByContext(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenContextsByContext", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetChildrenContextsByContext), varargs...)
}

// GetContextByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextByTypeAndName(ctx context.Context, in *GetContextByTypeAndNameRequest, opts ...grpc.CallOption) (*GetContextByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextByTypeAndName", varargs...)
	ret0, _ := ret[0].(*GetContextByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextByTypeAndName indicates an expected call of GetContextByTypeAndName.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextByTypeAndName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextByTypeAndName), varargs...)
}

// GetContextType mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextType(ctx context.Context, in *GetContextTypeRequest, opts ...grpc.CallOption) (*GetContextTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextType", varargs...)
	ret0, _ := ret[0].(*GetContextTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextType indicates an expected call of GetContextType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextType), varargs...)
}

// GetContextTypes mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextTypes(ctx context.Context, in *GetContextTypesRequest, opts ...grpc.CallOption) (*GetContextTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextTypes", varargs...)
	ret0, _ := ret[0].(*GetContextTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextTypes indicates an expected call of GetContextTypes.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextTypes", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextTypes), varargs...)
}

// GetContextTypesByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextTypesByID(ctx context.Context, in *GetContextTypesByIDRequest, opts ...grpc.CallOption) (*GetContextTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextTypesByID", varargs...)
	ret0, _ := ret[0].(*GetContextTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextTypesByID indicates an expected call of GetContextTypesByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextTypesByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextTypesByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextTypesByID), varargs...)
}

// GetContexts mocks base method.
func (m *MockMetadataStoreServiceClient) GetContexts(ctx context.Context, in *GetContextsRequest, opts ...grpc.CallOption) (*GetContextsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContexts", varargs...)
	ret0, _ := ret[0].(*GetContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContexts indicates an expected call of GetContexts.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContexts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContexts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContexts), varargs...)
}

// GetContextsByArtifact mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextsByArtifact(ctx context.Context, in *GetContextsByArtifactRequest, opts ...grpc.CallOption) (*GetContextsByArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextsByArtifact", varargs...)
	ret0, _ := ret[0].(*GetContextsByArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByArtifact indicates an expected call of GetContextsByArtifact.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextsByArtifact(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByArtifact", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextsByArtifact), varargs...)
}

// GetContextsByExecution mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextsByExecution(ctx context.Context, in *GetContextsByExecutionRequest, opts ...grpc.CallOption) (*GetContextsByExecutionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextsByExecution", varargs...)
	ret0, _ := ret[0].(*GetContextsByExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByExecution indicates an expected call of GetContextsByExecution.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextsByExecution(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByExecution", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextsByExecution), varargs...)
}

// GetContextsByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextsByID(ctx context.Context, in *GetContextsByIDRequest, opts ...grpc.CallOption) (*GetContextsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextsByID", varargs...)
	ret0, _ := ret[0].(*GetContextsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByID indicates an expected call of GetContextsByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextsByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextsByID), varargs...)
}

// GetContextsByType mocks base method.
func (m *MockMetadataStoreServiceClient) GetContextsByType(ctx context.Context, in *GetContextsByTypeRequest, opts ...grpc.CallOption) (*GetContextsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextsByType", varargs...)
	ret0, _ := ret[0].(*GetContextsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByType indicates an expected call of GetContextsByType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetContextsByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetContextsByType), varargs...)
}

// GetEventsByArtifactIDs mocks base method.
func (m *MockMetadataStoreServiceClient) GetEventsByArtifactIDs(ctx context.Context, in *GetEventsByArtifactIDsRequest, opts ...grpc.CallOption) (*GetEventsByArtifactIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsByArtifactIDs", varargs...)
	ret0, _ := ret[0].(*GetEventsByArtifactIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByArtifactIDs indicates an expected call of GetEventsByArtifactIDs.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetEventsByArtifactIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByArtifactIDs", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetEventsByArtifactIDs), varargs...)
}

// GetEventsByExecutionIDs mocks base method.
func (m *MockMetadataStoreServiceClient) GetEventsByExecutionIDs(ctx context.Context, in *GetEventsByExecutionIDsRequest, opts ...grpc.CallOption) (*GetEventsByExecutionIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsByExecutionIDs", varargs...)
	ret0, _ := ret[0].(*GetEventsByExecutionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByExecutionIDs indicates an expected call of GetEventsByExecutionIDs.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetEventsByExecutionIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByExecutionIDs", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetEventsByExecutionIDs), varargs...)
}

// GetExecutionByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionByTypeAndName(ctx context.Context, in *GetExecutionByTypeAndNameRequest, opts ...grpc.CallOption) (*GetExecutionByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionByTypeAndName", varargs...)
	ret0, _ := ret[0].(*GetExecutionByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionByTypeAndName indicates an expected call of GetExecutionByTypeAndName.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionByTypeAndName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionByTypeAndName), varargs...)
}

// GetExecutionType mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionType(ctx context.Context, in *GetExecutionTypeRequest, opts ...grpc.CallOption) (*GetExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionType", varargs...)
	ret0, _ := ret[0].(*GetExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionType indicates an expected call of GetExecutionType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionType), varargs...)
}

// GetExecutionTypes mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionTypes(ctx context.Context, in *GetExecutionTypesRequest, opts ...grpc.CallOption) (*GetExecutionTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionTypes", varargs...)
	ret0, _ := ret[0].(*GetExecutionTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTypes indicates an expected call of GetExecutionTypes.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTypes", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionTypes), varargs...)
}

// GetExecutionTypesByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionTypesByID(ctx context.Context, in *GetExecutionTypesByIDRequest, opts ...grpc.CallOption) (*GetExecutionTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionTypesByID", varargs...)
	ret0, _ := ret[0].(*GetExecutionTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTypesByID indicates an expected call of GetExecutionTypesByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionTypesByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTypesByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionTypesByID), varargs...)
}

// GetExecutions mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutions(ctx context.Context, in *GetExecutionsRequest, opts ...grpc.CallOption) (*GetExecutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutions", varargs...)
	ret0, _ := ret[0].(*GetExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutions), varargs...)
}

// GetExecutionsByContext mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionsByContext(ctx context.Context, in *GetExecutionsByContextRequest, opts ...grpc.CallOption) (*GetExecutionsByContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsByContext", varargs...)
	ret0, _ := ret[0].(*GetExecutionsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByContext indicates an expected call of GetExecutionsByContext.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionsByContext(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByContext", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionsByContext), varargs...)
}

// GetExecutionsByID mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionsByID(ctx context.Context, in *GetExecutionsByIDRequest, opts ...grpc.CallOption) (*GetExecutionsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsByID", varargs...)
	ret0, _ := ret[0].(*GetExecutionsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByID indicates an expected call of GetExecutionsByID.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionsByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionsByID), varargs...)
}

// GetExecutionsByType mocks base method.
func (m *MockMetadataStoreServiceClient) GetExecutionsByType(ctx context.Context, in *GetExecutionsByTypeRequest, opts ...grpc.CallOption) (*GetExecutionsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsByType", varargs...)
	ret0, _ := ret[0].(*GetExecutionsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByType indicates an expected call of GetExecutionsByType.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionsByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionsByType), varargs...)
}

// GetLineageGraph mocks base method.
func (m *MockMetadataStoreServiceClient) GetLineageGraph(ctx context.Context, in *GetLineageGraphRequest, opts ...grpc.CallOption) (*GetLineageGraphResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLineageGraph", varargs...)
	ret0, _ := ret[0].(*GetLineageGraphResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineageGraph indicates an expected call of GetLineageGraph.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetLineageGraph(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageGraph", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetLineageGraph), varargs...)
}

// GetParentContextsByContext mocks base method.
func (m *MockMetadataStoreServiceClient) GetParentContextsByContext(ctx context.Context, in *GetParentContextsByContextRequest, opts ...grpc.CallOption) (*GetParentContextsByContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParentContextsByContext", varargs...)
	ret0, _ := ret[0].(*GetParentContextsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentContextsByContext indicates an expected call of GetParentContextsByContext.
func (mr *MockMetadataStoreServiceClientMockRecorder) GetParentContextsByContext(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentContextsByContext", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetParentContextsByContext), varargs...)
}

// PutArtifactType mocks base method.
func (m *MockMetadataStoreServiceClient) PutArtifactType(ctx context.Context, in *PutArtifactTypeRequest, opts ...grpc.CallOption) (*PutArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutArtifactType", varargs...)
	ret0, _ := ret[0].(*PutArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifactType indicates an expected call of PutArtifactType.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutArtifactType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifactType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutArtifactType), varargs...)
}

// PutArtifacts mocks base method.
func (m *MockMetadataStoreServiceClient) PutArtifacts(ctx context.Context, in *PutArtifactsRequest, opts ...grpc.CallOption) (*PutArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutArtifacts", varargs...)
	ret0, _ := ret[0].(*PutArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifacts indicates an expected call of PutArtifacts.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifacts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutArtifacts), varargs...)
}

// PutAttributionsAndAssociations mocks base method.
func (m *MockMetadataStoreServiceClient) PutAttributionsAndAssociations(ctx context.Context, in *PutAttributionsAndAssociationsRequest, opts ...grpc.CallOption) (*PutAttributionsAndAssociationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAttributionsAndAssociations", varargs...)
	ret0, _ := ret[0].(*PutAttributionsAndAssociationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributionsAndAssociations indicates an expected call of PutAttributionsAndAssociations.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutAttributionsAndAssociations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributionsAndAssociations", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutAttributionsAndAssociations), varargs...)
}

// PutContextType mocks base method.
func (m *MockMetadataStoreServiceClient) PutContextType(ctx context.Context, in *PutContextTypeRequest, opts ...grpc.CallOption) (*PutContextTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutContextType", varargs...)
	ret0, _ := ret[0].(*PutContextTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContextType indicates an expected call of PutContextType.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutContextType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContextType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutContextType), varargs...)
}

// PutContexts mocks base method.
func (m *MockMetadataStoreServiceClient) PutContexts(ctx context.Context, in *PutContextsRequest, opts ...grpc.CallOption) (*PutContextsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutContexts", varargs...)
	ret0, _ := ret[0].(*PutContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContexts indicates an expected call of PutContexts.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutContexts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContexts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutContexts), varargs...)
}

// PutEvents mocks base method.
func (m *MockMetadataStoreServiceClient) PutEvents(ctx context.Context, in *PutEventsRequest, opts ...grpc.CallOption) (*PutEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEvents", varargs...)
	ret0, _ := ret[0].(*PutEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutEvents), varargs...)
}

// PutExecution mocks base method.
func (m *MockMetadataStoreServiceClient) PutExecution(ctx context.Context, in *PutExecutionRequest, opts ...grpc.CallOption) (*PutExecutionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExecution", varargs...)
	ret0, _ := ret[0].(*PutExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecution indicates an expected call of PutExecution.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutExecution(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecution", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutExecution), varargs...)
}

// PutExecutionType mocks base method.
func (m *MockMetadataStoreServiceClient) PutExecutionType(ctx context.Context, in *PutExecutionTypeRequest, opts ...grpc.CallOption) (*PutExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExecutionType", varargs...)
	ret0, _ := ret[0].(*PutExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutionType indicates an expected call of PutExecutionType.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutExecutionType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutionType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutExecutionType), varargs...)
}

// PutExecutions mocks base method.
func (m *MockMetadataStoreServiceClient) PutExecutions(ctx context.Context, in *PutExecutionsRequest, opts ...grpc.CallOption) (*PutExecutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExecutions", varargs...)
	ret0, _ := ret[0].(*PutExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutions indicates an expected call of PutExecutions.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutExecutions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutions", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutExecutions), varargs...)
}

// PutParentContexts mocks base method.
func (m *MockMetadataStoreServiceClient) PutParentContexts(ctx context.Context, in *PutParentContextsRequest, opts ...grpc.CallOption) (*PutParentContextsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutParentContexts", varargs...)
	ret0, _ := ret[0].(*PutParentContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutParentContexts indicates an expected call of PutParentContexts.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutParentContexts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutParentContexts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutParentContexts), varargs...)
}

// PutTypes mocks base method.
func (m *MockMetadataStoreServiceClient) PutTypes(ctx context.Context, in *PutTypesRequest, opts ...grpc.CallOption) (*PutTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTypes", varargs...)
	ret0, _ := ret[0].(*PutTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTypes indicates an expected call of PutTypes.
func (mr *MockMetadataStoreServiceClientMockRecorder) PutTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTypes", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutTypes), varargs...)
}

// MockMetadataStoreServiceServer is a mock of MetadataStoreServiceServer interface.
type MockMetadataStoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataStoreServiceServerMockRecorder
}

// MockMetadataStoreServiceServerMockRecorder is the mock recorder for MockMetadataStoreServiceServer.
type MockMetadataStoreServiceServerMockRecorder struct {
	mock *MockMetadataStoreServiceServer
}

// NewMockMetadataStoreServiceServer creates a new mock instance.
func NewMockMetadataStoreServiceServer(ctrl *gomock.Controller) *MockMetadataStoreServiceServer {
	mock := &MockMetadataStoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetadataStoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataStoreServiceServer) EXPECT() *MockMetadataStoreServiceServerMockRecorder {
	return m.recorder
}

// GetArtifactByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactByTypeAndName(arg0 context.Context, arg1 *GetArtifactByTypeAndNameRequest) (*GetArtifactByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactByTypeAndName", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactByTypeAndName indicates an expected call of GetArtifactByTypeAndName.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactByTypeAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactByTypeAndName), arg0, arg1)
}

// GetArtifactType mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactType(arg0 context.Context, arg1 *GetArtifactTypeRequest) (*GetArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactType", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactType indicates an expected call of GetArtifactType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactType), arg0, arg1)
}

// GetArtifactTypes mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactTypes(arg0 context.Context, arg1 *GetArtifactTypesRequest) (*GetArtifactTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactTypes", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactTypes indicates an expected call of GetArtifactTypes.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactTypes", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactTypes), arg0, arg1)
}

// GetArtifactTypesByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactTypesByID(arg0 context.Context, arg1 *GetArtifactTypesByIDRequest) (*GetArtifactTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactTypesByID", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactTypesByID indicates an expected call of GetArtifactTypesByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactTypesByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactTypesByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactTypesByID), arg0, arg1)
}

// GetArtifacts mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifacts(arg0 context.Context, arg1 *GetArtifactsRequest) (*GetArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifacts indicates an expected call of GetArtifacts.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifacts), arg0, arg1)
}

// GetArtifactsByContext mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactsByContext(arg0 context.Context, arg1 *GetArtifactsByContextRequest) (*GetArtifactsByContextResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactsByContext", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByContext indicates an expected call of GetArtifactsByContext.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactsByContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByContext", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactsByContext), arg0, arg1)
}

// GetArtifactsByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactsByID(arg0 context.Context, arg1 *GetArtifactsByIDRequest) (*GetArtifactsByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactsByID", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByID indicates an expected call of GetArtifactsByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactsByID), arg0, arg1)
}

// GetArtifactsByType mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactsByType(arg0 context.Context, arg1 *GetArtifactsByTypeRequest) (*GetArtifactsByTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactsByType", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByType indicates an expected call of GetArtifactsByType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactsByType), arg0, arg1)
}

// GetArtifactsByURI mocks base method.
func (m *MockMetadataStoreServiceServer) GetArtifactsByURI(arg0 context.Context, arg1 *GetArtifactsByURIRequest) (*GetArtifactsByURIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactsByURI", arg0, arg1)
	ret0, _ := ret[0].(*GetArtifactsByURIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByURI indicates an expected call of GetArtifactsByURI.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetArtifactsByURI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByURI", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetArtifactsByURI), arg0, arg1)
}

// GetChildrenContextsByContext mocks base method.
func (m *MockMetadataStoreServiceServer) GetChildrenContextsByContext(arg0 context.Context, arg1 *GetChildrenContextsByContextRequest) (*GetChildrenContextsByContextResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenContextsByContext", arg0, arg1)
	ret0, _ := ret[0].(*GetChildrenContextsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenContextsByContext indicates an expected call of GetChildrenContextsByContext.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetChildrenContextsByContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenContextsByContext", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetChildrenContextsByContext), arg0, arg1)
}

// GetContextByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextByTypeAndName(arg0 context.Context, arg1 *GetContextByTypeAndNameRequest) (*GetContextByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextByTypeAndName", arg0, arg1)
	ret0, _ := ret[0].(*GetContextByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextByTypeAndName indicates an expected call of GetContextByTypeAndName.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextByTypeAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextByTypeAndName), arg0, arg1)
}

// GetContextType mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextType(arg0 context.Context, arg1 *GetContextTypeRequest) (*GetContextTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextType", arg0, arg1)
	ret0, _ := ret[0].(*GetContextTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextType indicates an expected call of GetContextType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextType), arg0, arg1)
}

// GetContextTypes mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextTypes(arg0 context.Context, arg1 *GetContextTypesRequest) (*GetContextTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextTypes", arg0, arg1)
	ret0, _ := ret[0].(*GetContextTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextTypes indicates an expected call of GetContextTypes.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextTypes", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextTypes), arg0, arg1)
}

// GetContextTypesByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextTypesByID(arg0 context.Context, arg1 *GetContextTypesByIDRequest) (*GetContextTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextTypesByID", arg0, arg1)
	ret0, _ := ret[0].(*GetContextTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextTypesByID indicates an expected call of GetContextTypesByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextTypesByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextTypesByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextTypesByID), arg0, arg1)
}

// GetContexts mocks base method.
func (m *MockMetadataStoreServiceServer) GetContexts(arg0 context.Context, arg1 *GetContextsRequest) (*GetContextsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContexts", arg0, arg1)
	ret0, _ := ret[0].(*GetContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContexts indicates an expected call of GetContexts.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContexts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContexts", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContexts), arg0, arg1)
}

// GetContextsByArtifact mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextsByArtifact(arg0 context.Context, arg1 *GetContextsByArtifactRequest) (*GetContextsByArtifactResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextsByArtifact", arg0, arg1)
	ret0, _ := ret[0].(*GetContextsByArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByArtifact indicates an expected call of GetContextsByArtifact.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextsByArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByArtifact", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextsByArtifact), arg0, arg1)
}

// GetContextsByExecution mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextsByExecution(arg0 context.Context, arg1 *GetContextsByExecutionRequest) (*GetContextsByExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextsByExecution", arg0, arg1)
	ret0, _ := ret[0].(*GetContextsByExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByExecution indicates an expected call of GetContextsByExecution.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextsByExecution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByExecution", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextsByExecution), arg0, arg1)
}

// GetContextsByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextsByID(arg0 context.Context, arg1 *GetContextsByIDRequest) (*GetContextsByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextsByID", arg0, arg1)
	ret0, _ := ret[0].(*GetContextsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByID indicates an expected call of GetContextsByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextsByID), arg0, arg1)
}

// GetContextsByType mocks base method.
func (m *MockMetadataStoreServiceServer) GetContextsByType(arg0 context.Context, arg1 *GetContextsByTypeRequest) (*GetContextsByTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextsByType", arg0, arg1)
	ret0, _ := ret[0].(*GetContextsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextsByType indicates an expected call of GetContextsByType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetContextsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextsByType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetContextsByType), arg0, arg1)
}

// GetEventsByArtifactIDs mocks base method.
func (m *MockMetadataStoreServiceServer) GetEventsByArtifactIDs(arg0 context.Context, arg1 *GetEventsByArtifactIDsRequest) (*GetEventsByArtifactIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByArtifactIDs", arg0, arg1)
	ret0, _ := ret[0].(*GetEventsByArtifactIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByArtifactIDs indicates an expected call of GetEventsByArtifactIDs.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetEventsByArtifactIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByArtifactIDs", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetEventsByArtifactIDs), arg0, arg1)
}

// GetEventsByExecutionIDs mocks base method.
func (m *MockMetadataStoreServiceServer) GetEventsByExecutionIDs(arg0 context.Context, arg1 *GetEventsByExecutionIDsRequest) (*GetEventsByExecutionIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByExecutionIDs", arg0, arg1)
	ret0, _ := ret[0].(*GetEventsByExecutionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByExecutionIDs indicates an expected call of GetEventsByExecutionIDs.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetEventsByExecutionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByExecutionIDs", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetEventsByExecutionIDs), arg0, arg1)
}

// GetExecutionByTypeAndName mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionByTypeAndName(arg0 context.Context, arg1 *GetExecutionByTypeAndNameRequest) (*GetExecutionByTypeAndNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionByTypeAndName", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionByTypeAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionByTypeAndName indicates an expected call of GetExecutionByTypeAndName.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionByTypeAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionByTypeAndName", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionByTypeAndName), arg0, arg1)
}

// GetExecutionType mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionType(arg0 context.Context, arg1 *GetExecutionTypeRequest) (*GetExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionType", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionType indicates an expected call of GetExecutionType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionType), arg0, arg1)
}

// GetExecutionTypes mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionTypes(arg0 context.Context, arg1 *GetExecutionTypesRequest) (*GetExecutionTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionTypes", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTypes indicates an expected call of GetExecutionTypes.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTypes", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionTypes), arg0, arg1)
}

// GetExecutionTypesByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionTypesByID(arg0 context.Context, arg1 *GetExecutionTypesByIDRequest) (*GetExecutionTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionTypesByID", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTypesByID indicates an expected call of GetExecutionTypesByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionTypesByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTypesByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionTypesByID), arg0, arg1)
}

// GetExecutions mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutions(arg0 context.Context, arg1 *GetExecutionsRequest) (*GetExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutions", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutions), arg0, arg1)
}

// GetExecutionsByContext mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionsByContext(arg0 context.Context, arg1 *GetExecutionsByContextRequest) (*GetExecutionsByContextResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsByContext", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByContext indicates an expected call of GetExecutionsByContext.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionsByContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByContext", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionsByContext), arg0, arg1)
}

// GetExecutionsByID mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionsByID(arg0 context.Context, arg1 *GetExecutionsByIDRequest) (*GetExecutionsByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsByID", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByID indicates an expected call of GetExecutionsByID.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByID", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionsByID), arg0, arg1)
}

// GetExecutionsByType mocks base method.
func (m *MockMetadataStoreServiceServer) GetExecutionsByType(arg0 context.Context, arg1 *GetExecutionsByTypeRequest) (*GetExecutionsByTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsByType", arg0, arg1)
	ret0, _ := ret[0].(*GetExecutionsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByType indicates an expected call of GetExecutionsByType.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetExecutionsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetExecutionsByType), arg0, arg1)
}

// GetLineageGraph mocks base method.
func (m *MockMetadataStoreServiceServer) GetLineageGraph(arg0 context.Context, arg1 *GetLineageGraphRequest) (*GetLineageGraphResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineageGraph", arg0, arg1)
	ret0, _ := ret[0].(*GetLineageGraphResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineageGraph indicates an expected call of GetLineageGraph.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetLineageGraph(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageGraph", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetLineageGraph), arg0, arg1)
}

// GetParentContextsByContext mocks base method.
func (m *MockMetadataStoreServiceServer) GetParentContextsByContext(arg0 context.Context, arg1 *GetParentContextsByContextRequest) (*GetParentContextsByContextResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentContextsByContext", arg0, arg1)
	ret0, _ := ret[0].(*GetParentContextsByContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentContextsByContext indicates an expected call of GetParentContextsByContext.
func (mr *MockMetadataStoreServiceServerMockRecorder) GetParentContextsByContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentContextsByContext", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).GetParentContextsByContext), arg0, arg1)
}

// PutArtifactType mocks base method.
func (m *MockMetadataStoreServiceServer) PutArtifactType(arg0 context.Context, arg1 *PutArtifactTypeRequest) (*PutArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutArtifactType", arg0, arg1)
	ret0, _ := ret[0].(*PutArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifactType indicates an expected call of PutArtifactType.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutArtifactType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifactType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutArtifactType), arg0, arg1)
}

// PutArtifacts mocks base method.
func (m *MockMetadataStoreServiceServer) PutArtifacts(arg0 context.Context, arg1 *PutArtifactsRequest) (*PutArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*PutArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifacts indicates an expected call of PutArtifacts.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifacts", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutArtifacts), arg0, arg1)
}

// PutAttributionsAndAssociations mocks base method.
func (m *MockMetadataStoreServiceServer) PutAttributionsAndAssociations(arg0 context.Context, arg1 *PutAttributionsAndAssociationsRequest) (*PutAttributionsAndAssociationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAttributionsAndAssociations", arg0, arg1)
	ret0, _ := ret[0].(*PutAttributionsAndAssociationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributionsAndAssociations indicates an expected call of PutAttributionsAndAssociations.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutAttributionsAndAssociations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributionsAndAssociations", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutAttributionsAndAssociations), arg0, arg1)
}

// PutContextType mocks base method.
func (m *MockMetadataStoreServiceServer) PutContextType(arg0 context.Context, arg1 *PutContextTypeRequest) (*PutContextTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContextType", arg0, arg1)
	ret0, _ := ret[0].(*PutContextTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContextType indicates an expected call of PutContextType.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutContextType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContextType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutContextType), arg0, arg1)
}

// PutContexts mocks base method.
func (m *MockMetadataStoreServiceServer) PutContexts(arg0 context.Context, arg1 *PutContextsRequest) (*PutContextsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContexts", arg0, arg1)
	ret0, _ := ret[0].(*PutContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContexts indicates an expected call of PutContexts.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutContexts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContexts", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutContexts), arg0, arg1)
}

// PutEvents mocks base method.
func (m *MockMetadataStoreServiceServer) PutEvents(arg0 context.Context, arg1 *PutEventsRequest) (*PutEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", arg0, arg1)
	ret0, _ := ret[0].(*PutEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutEvents), arg0, arg1)
}

// PutExecution mocks base method.
func (m *MockMetadataStoreServiceServer) PutExecution(arg0 context.Context, arg1 *PutExecutionRequest) (*PutExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExecution", arg0, arg1)
	ret0, _ := ret[0].(*PutExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecution indicates an expected call of PutExecution.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutExecution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecution", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutExecution), arg0, arg1)
}

// PutExecutionType mocks base method.
func (m *MockMetadataStoreServiceServer) PutExecutionType(arg0 context.Context, arg1 *PutExecutionTypeRequest) (*PutExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExecutionType", arg0, arg1)
	ret0, _ := ret[0].(*PutExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutionType indicates an expected call of PutExecutionType.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutExecutionType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutionType", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutExecutionType), arg0, arg1)
}

// PutExecutions mocks base method.
func (m *MockMetadataStoreServiceServer) PutExecutions(arg0 context.Context, arg1 *PutExecutionsRequest) (*PutExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExecutions", arg0, arg1)
	ret0, _ := ret[0].(*PutExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutions indicates an expected call of PutExecutions.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutExecutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutions", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutExecutions), arg0, arg1)
}

// PutParentContexts mocks base method.
func (m *MockMetadataStoreServiceServer) PutParentContexts(arg0 context.Context, arg1 *PutParentContextsRequest) (*PutParentContextsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutParentContexts", arg0, arg1)
	ret0, _ := ret[0].(*PutParentContextsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutParentContexts indicates an expected call of PutParentContexts.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutParentContexts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutParentContexts", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutParentContexts), arg0, arg1)
}

// PutTypes mocks base method.
func (m *MockMetadataStoreServiceServer) PutTypes(arg0 context.Context, arg1 *PutTypesRequest) (*PutTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTypes", arg0, arg1)
	ret0, _ := ret[0].(*PutTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTypes indicates an expected call of PutTypes.
func (mr *MockMetadataStoreServiceServerMockRecorder) PutTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTypes", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).PutTypes), arg0, arg1)
}

// mustEmbedUnimplementedMetadataStoreServiceServer mocks base method.
func (m *MockMetadataStoreServiceServer) mustEmbedUnimplementedMetadataStoreServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetadataStoreServiceServer")
}

// mustEmbedUnimplementedMetadataStoreServiceServer indicates an expected call of mustEmbedUnimplementedMetadataStoreServiceServer.
func (mr *MockMetadataStoreServiceServerMockRecorder) mustEmbedUnimplementedMetadataStoreServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetadataStoreServiceServer", reflect.TypeOf((*MockMetadataStoreServiceServer)(nil).mustEmbedUnimplementedMetadataStoreServiceServer))
}

// MockUnsafeMetadataStoreServiceServer is a mock of UnsafeMetadataStoreServiceServer interface.
type MockUnsafeMetadataStoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetadataStoreServiceServerMockRecorder
}

// MockUnsafeMetadataStoreServiceServerMockRecorder is the mock recorder for MockUnsafeMetadataStoreServiceServer.
type MockUnsafeMetadataStoreServiceServerMockRecorder struct {
	mock *MockUnsafeMetadataStoreServiceServer
}

// NewMockUnsafeMetadataStoreServiceServer creates a new mock instance.
func NewMockUnsafeMetadataStoreServiceServer(ctrl *gomock.Controller) *MockUnsafeMetadataStoreServiceServer {
	mock := &MockUnsafeMetadataStoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetadataStoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetadataStoreServiceServer) EXPECT() *MockUnsafeMetadataStoreServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetadataStoreServiceServer mocks base method.
func (m *MockUnsafeMetadataStoreServiceServer) mustEmbedUnimplementedMetadataStoreServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetadataStoreServiceServer")
}

// mustEmbedUnimplementedMetadataStoreServiceServer indicates an expected call of mustEmbedUnimplementedMetadataStoreServiceServer.
func (mr *MockUnsafeMetadataStoreServiceServerMockRecorder) mustEmbedUnimplementedMetadataStoreServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetadataStoreServiceServer", reflect.TypeOf((*MockUnsafeMetadataStoreServiceServer)(nil).mustEmbedUnimplementedMetadataStoreServiceServer))
}
