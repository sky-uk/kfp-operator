// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/pipelines/backend/api/go_client (interfaces: RunServiceClient)

// Package run_completion is a generated GoMock package.
package run_completion

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_client "github.com/kubeflow/pipelines/backend/api/go_client"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockRunServiceClient is a mock of RunServiceClient interface.
type MockRunServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRunServiceClientMockRecorder
}

// MockRunServiceClientMockRecorder is the mock recorder for MockRunServiceClient.
type MockRunServiceClientMockRecorder struct {
	mock *MockRunServiceClient
}

// NewMockRunServiceClient creates a new mock instance.
func NewMockRunServiceClient(ctrl *gomock.Controller) *MockRunServiceClient {
	mock := &MockRunServiceClient{ctrl: ctrl}
	mock.recorder = &MockRunServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunServiceClient) EXPECT() *MockRunServiceClientMockRecorder {
	return m.recorder
}

// ArchiveRun mocks base method.
func (m *MockRunServiceClient) ArchiveRun(arg0 context.Context, arg1 *go_client.ArchiveRunRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveRun", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveRun indicates an expected call of ArchiveRun.
func (mr *MockRunServiceClientMockRecorder) ArchiveRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveRun", reflect.TypeOf((*MockRunServiceClient)(nil).ArchiveRun), varargs...)
}

// CreateRun mocks base method.
func (m *MockRunServiceClient) CreateRun(arg0 context.Context, arg1 *go_client.CreateRunRequest, arg2 ...grpc.CallOption) (*go_client.RunDetail, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRun", varargs...)
	ret0, _ := ret[0].(*go_client.RunDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRun indicates an expected call of CreateRun.
func (mr *MockRunServiceClientMockRecorder) CreateRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRun", reflect.TypeOf((*MockRunServiceClient)(nil).CreateRun), varargs...)
}

// DeleteRun mocks base method.
func (m *MockRunServiceClient) DeleteRun(arg0 context.Context, arg1 *go_client.DeleteRunRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRun", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRun indicates an expected call of DeleteRun.
func (mr *MockRunServiceClientMockRecorder) DeleteRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRun", reflect.TypeOf((*MockRunServiceClient)(nil).DeleteRun), varargs...)
}

// GetRun mocks base method.
func (m *MockRunServiceClient) GetRun(arg0 context.Context, arg1 *go_client.GetRunRequest, arg2 ...grpc.CallOption) (*go_client.RunDetail, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRun", varargs...)
	ret0, _ := ret[0].(*go_client.RunDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun.
func (mr *MockRunServiceClientMockRecorder) GetRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockRunServiceClient)(nil).GetRun), varargs...)
}

// ListRuns mocks base method.
func (m *MockRunServiceClient) ListRuns(arg0 context.Context, arg1 *go_client.ListRunsRequest, arg2 ...grpc.CallOption) (*go_client.ListRunsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuns", varargs...)
	ret0, _ := ret[0].(*go_client.ListRunsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuns indicates an expected call of ListRuns.
func (mr *MockRunServiceClientMockRecorder) ListRuns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuns", reflect.TypeOf((*MockRunServiceClient)(nil).ListRuns), varargs...)
}

// ReadArtifact mocks base method.
func (m *MockRunServiceClient) ReadArtifact(arg0 context.Context, arg1 *go_client.ReadArtifactRequest, arg2 ...grpc.CallOption) (*go_client.ReadArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadArtifact", varargs...)
	ret0, _ := ret[0].(*go_client.ReadArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadArtifact indicates an expected call of ReadArtifact.
func (mr *MockRunServiceClientMockRecorder) ReadArtifact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadArtifact", reflect.TypeOf((*MockRunServiceClient)(nil).ReadArtifact), varargs...)
}

// ReportRunMetrics mocks base method.
func (m *MockRunServiceClient) ReportRunMetrics(arg0 context.Context, arg1 *go_client.ReportRunMetricsRequest, arg2 ...grpc.CallOption) (*go_client.ReportRunMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportRunMetrics", varargs...)
	ret0, _ := ret[0].(*go_client.ReportRunMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportRunMetrics indicates an expected call of ReportRunMetrics.
func (mr *MockRunServiceClientMockRecorder) ReportRunMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportRunMetrics", reflect.TypeOf((*MockRunServiceClient)(nil).ReportRunMetrics), varargs...)
}

// RetryRun mocks base method.
func (m *MockRunServiceClient) RetryRun(arg0 context.Context, arg1 *go_client.RetryRunRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryRun", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryRun indicates an expected call of RetryRun.
func (mr *MockRunServiceClientMockRecorder) RetryRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryRun", reflect.TypeOf((*MockRunServiceClient)(nil).RetryRun), varargs...)
}

// TerminateRun mocks base method.
func (m *MockRunServiceClient) TerminateRun(arg0 context.Context, arg1 *go_client.TerminateRunRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateRun", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateRun indicates an expected call of TerminateRun.
func (mr *MockRunServiceClientMockRecorder) TerminateRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRun", reflect.TypeOf((*MockRunServiceClient)(nil).TerminateRun), varargs...)
}

// UnarchiveRun mocks base method.
func (m *MockRunServiceClient) UnarchiveRun(arg0 context.Context, arg1 *go_client.UnarchiveRunRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnarchiveRun", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnarchiveRun indicates an expected call of UnarchiveRun.
func (mr *MockRunServiceClientMockRecorder) UnarchiveRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveRun", reflect.TypeOf((*MockRunServiceClient)(nil).UnarchiveRun), varargs...)
}
