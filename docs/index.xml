<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubeflow-Pipelines K8s Operator on KFP-Operator</title><link>https://sky-uk.github.io/kfp-operator/</link><description>Recent content in Kubeflow-Pipelines K8s Operator on KFP-Operator</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://sky-uk.github.io/kfp-operator/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/configuration/</guid><description>&lt;p&gt;The Kubeflow Pipelines operator can be configured with the following parameters:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultExperiment&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default Experiment name to be used for creating pipeline runs&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultProvider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default provider name to be used (see &lt;a href="../providers"&gt;Using Multiple Providers&lt;/a&gt;). &lt;strong&gt;Note:&lt;/strong&gt; This is deprecated as of v1alpha6 and will be removed when support for v1alpha5 is dropped&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;vertex-ai-europe&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultTfxImage&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default TFX image to be used when converting provider resource from v1alpha5 or v1alpha6 to v1beta1&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;gcr.io/tfx-oss-public/tfx:0.32.0&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;multiversion&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;If enabled, it will support previous versions of the CRDs, only the latest otherwise&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;workflowNamespace&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Namespace where operator Argo workflows should be running - defaults to the operator&amp;rsquo;s namespace&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;kfp-operator-workflows&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionTTL&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Duration string for how long to keep one-off runs after completion - a zero-length or negative duration will result in runs being deleted immediately after completion; defaults to empty (never delete runs)&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;10m&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionFeed&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="#run-completion-feed-configuration"&gt;Configuration of the service&lt;/a&gt; for the run completion feed back to KFP Operator&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultProviderValues&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="#provider-values-configuration"&gt;Configuration of the deployment and service&lt;/a&gt; created for &lt;a href="../reference/providers/overview"&gt;providers&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="run-completion-feed-configuration"&gt;Run Completion Feed Configuration&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;port&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that the feed endpoint will listen on&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8082&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;endpoints&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Array of run completion event handler endpoints that should be called per feed message&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;- host: run-completion-event-handler&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;path: /&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;port: 12000&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="provider-values-configuration"&gt;Provider Values Configuration&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;replicas&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Number of replicas used within the deployment&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;serviceContainerName&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Name of the container that will execute the provider image. &lt;strong&gt;Note:&lt;/strong&gt; this must match the podTemplateSpec name&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;provider-service&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;servicePort&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that should expose the service &lt;strong&gt;Note:&lt;/strong&gt; this must match the podTemplateSpec ports&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;metricsPort&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that should expose the metrics service. &lt;strong&gt;Note:&lt;/strong&gt; this must match the &lt;code&gt;metrics&lt;/code&gt; port defined in the podTemplateSpec&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8081&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;A map of additional labels to add to the provider service Deployment &lt;strong&gt;and&lt;/strong&gt; Service. The Deployment and Service will also have a label of &lt;code&gt;app: provider-&amp;lt;provider_name&amp;gt;&lt;/code&gt;. To attach labels to a provider service pod, use &lt;code&gt;podTemplateSpec&lt;/code&gt;.&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;a: label&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;podTemplateSpec&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates"&gt;k8s pod template spec for the provider service deployment&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;An example configuration:&lt;/p&gt;</description></item><item><title>Configuration</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/configuration/</guid><description>&lt;p&gt;The Kubeflow Pipelines operator can be configured with the following parameters:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultExperiment&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default Experiment name to be used for creating pipeline runs&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultProvider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default provider name to be used (see &lt;a href="../providers"&gt;Using Multiple Providers&lt;/a&gt;). &lt;strong&gt;Note:&lt;/strong&gt; This is deprecated as of v1alpha6 and will be removed when support for v1alpha5 is dropped&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;vertex-ai-europe&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;multiversion&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;If enabled, it will support previous versions of the CRDs, only the latest otherwise&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;workflowNamespace&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Namespace where operator Argo workflows should be running - defaults to the operator&amp;rsquo;s namespace&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;kfp-operator-workflows&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionTTL&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Duration string for how long to keep one-off runs after completion - a zero-length or negative duration will result in runs being deleted immediately after completion; defaults to empty (never delete runs)&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;10m&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionFeed&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Configuration of the service for the run completion feed back to KFP Operator&lt;/td&gt;
 &lt;td&gt;See &lt;a href="#run-completion-feed-configuration"&gt;here&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;An example configuration:&lt;/p&gt;</description></item><item><title>Configuration</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/configuration/</guid><description>&lt;p&gt;The Kubeflow Pipelines operator can be configured with the following parameters:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultExperiment&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default Experiment name to be used for creating pipeline runs&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultProvider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default provider name to be used (see &lt;a href="../providers"&gt;Using Multiple Providers&lt;/a&gt;). &lt;strong&gt;Note:&lt;/strong&gt; This is deprecated as of v1alpha6 and will be removed when support for v1alpha5 is dropped&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;vertex-ai-europe&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultTfxImage&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default TFX image to be used when converting provider resource from v1alpha5 or v1alpha6 to v1beta1&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;gcr.io/tfx-oss-public/tfx:0.32.0&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;multiversion&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;If enabled, it will support previous versions of the CRDs, only the latest otherwise&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;workflowNamespace&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Namespace where operator Argo workflows should be running - defaults to the operator&amp;rsquo;s namespace&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;kfp-operator-workflows&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionTTL&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Duration string for how long to keep one-off runs after completion - a zero-length or negative duration will result in runs being deleted immediately after completion; defaults to empty (never delete runs)&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;10m&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runCompletionFeed&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="#run-completion-feed-configuration"&gt;Configuration of the service&lt;/a&gt; for the run completion feed back to KFP Operator&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;defaultProviderValues&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="#provider-values-configuration"&gt;Configuration of the deployment and service&lt;/a&gt; created for &lt;a href="../reference/providers/overview"&gt;providers&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="run-completion-feed-configuration"&gt;Run Completion Feed Configuration&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;port&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that the feed endpoint will listen on&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8082&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;endpoints&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Array of run completion event handler endpoints that should be called per feed message&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;- host: run-completion-event-handler&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;path: /&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;port: 12000&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="provider-values-configuration"&gt;Provider Values Configuration&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;replicas&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Number of replicas used within the deployment&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;serviceContainerName&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Name of the container that will execute the provider image. &lt;strong&gt;Note:&lt;/strong&gt; this must match the podTemplateSpec name&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;provider-service&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;servicePort&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that should expose the service &lt;strong&gt;Note:&lt;/strong&gt; this must match the podTemplateSpec ports&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;metricsPort&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The port that should expose the metrics service. &lt;strong&gt;Note:&lt;/strong&gt; this must match the &lt;code&gt;metrics&lt;/code&gt; port defined in the podTemplateSpec&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;8081&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;A map of additional labels to add to the provider service Deployment &lt;strong&gt;and&lt;/strong&gt; Service. The Deployment and Service will also have a label of &lt;code&gt;app: provider-&amp;lt;provider_name&amp;gt;&lt;/code&gt;. To attach labels to a provider service pod, use &lt;code&gt;podTemplateSpec&lt;/code&gt;.&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;a: label&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;podTemplateSpec&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates"&gt;k8s pod template spec for the provider service deployment&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;An example configuration:&lt;/p&gt;</description></item><item><title>Overview</title><link>https://sky-uk.github.io/kfp-operator/docs/getting-started/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/getting-started/overview/</guid><description>&lt;p&gt;The Kubeflow Pipelines Operator (KFP Operator) offers a declarative API designed to streamline the management,
execution, and events of ML pipelines across various providers using resource definitions.
A &amp;ldquo;provider&amp;rdquo; refers to a runtime environment that handles the orchestration and execution of these pipelines and
associated resources.&lt;/p&gt;
&lt;p&gt;The diagram below gives a high level overview of what the KFP Operator offers.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/master/images/high-level-overview.svg" alt="high-level-overview"&gt;&lt;/p&gt;
&lt;p&gt;For a more detailed architecture, see this &lt;a href="../introduction/#architecture-overview"&gt;overview&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="why-kfp-operator"&gt;Why KFP Operator&lt;/h3&gt;
&lt;p&gt;This project was initiated with the goal of &lt;strong&gt;promoting best practices in Machine Learning engineering&lt;/strong&gt; while minimizing
the operational complexities involved in deploying, executing, and maintaining training pipelines. This project seeks to
move away from manual, error-prone, copy-and-paste deployments, and towards a &lt;strong&gt;declarative, transparent, and
self-service model&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Overview</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/providers/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/providers/overview/</guid><description>&lt;p&gt;The KFP Operator supports the following pipeline orchestration providers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="../kfp"&gt;Kubeflow Pipelines Integration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="../vai"&gt;Vertex AI Integration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also integrate the KFP Operator with custom providers by implementing a &lt;a href="#using-custom-providers"&gt;custom Provider Service&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="service"&gt;Service&lt;/h2&gt;
&lt;p&gt;A provider service bridges the KFP Operator and the pipeline orchestration provider. It performs key tasks such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eventing&lt;/strong&gt;: Reports the state of resources on the provider to the KFP Operator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;: Manages provider-specific resources, such as runs in Vertex AI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The KFP Operator will deploy the Provider service as Kubernetes deployment with an accompanying Kubernetes Service based
off the &lt;a href="#configuration"&gt;configuration provided.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Overview</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/overview/</guid><description>&lt;p&gt;The Kubeflow Pipelines Operator (KFP Operator) provides a declarative API for managing and running ML pipelines with Resource Definitions on multiple providers.
A provider is a runtime environment for managing and executing ML pipelines and related resources.&lt;/p&gt;
&lt;h3 id="why-kfp-operator"&gt;Why KFP Operator&lt;/h3&gt;
&lt;p&gt;We started this project to promote the best engineering practices in the Machine Learning process, while reducing the operational overhead associated with deploying, running and maintaining training pipelines. We wanted to move away from a manual, opaque, copy-and-paste style deployment and closer to a declarative, traceable, and self-serve approach.&lt;/p&gt;</description></item><item><title>Overview</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/overview/</guid><description>&lt;p&gt;The Kubeflow Pipelines Operator (KFP Operator) offers a declarative API designed to streamline the management,
execution, and events of ML pipelines across various providers using resource definitions.
A &amp;ldquo;provider&amp;rdquo; refers to a runtime environment that handles the orchestration and execution of these pipelines and
associated resources.&lt;/p&gt;
&lt;p&gt;The diagram below gives a high level overview of what the KFP Operator offers.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/versions/v0.7.0/images/high-level-overview.svg" alt="high-level-overview"&gt;&lt;/p&gt;
&lt;p&gt;For a more detailed architecture, see this &lt;a href="../introduction/#architecture-overview"&gt;overview&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="why-kfp-operator"&gt;Why KFP Operator&lt;/h3&gt;
&lt;p&gt;This project was initiated with the goal of &lt;strong&gt;promoting best practices in Machine Learning engineering&lt;/strong&gt; while minimizing
the operational complexities involved in deploying, executing, and maintaining training pipelines. This project seeks to
move away from manual, error-prone, copy-and-paste deployments, and towards a &lt;strong&gt;declarative, transparent, and
self-service model&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Overview</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/overview/</guid><description>&lt;p&gt;The KFP Operator supports multiple pipeline orchestration providers, currently including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="../vai"&gt;Vertex AI Integration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="../kfp"&gt;Kubeflow Pipelines Integration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also integrate the KFP Operator with custom providers by implementing a &lt;a href="#using-custom-providers"&gt;custom Provider Service&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="service"&gt;Service&lt;/h2&gt;
&lt;p&gt;A provider service bridges the KFP Operator and the pipeline orchestration provider. It performs key tasks such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eventing&lt;/strong&gt;: Reports the state of resources on the provider to the KFP Operator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;: Manages provider-specific resources, such as runs in Vertex AI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The KFP Operator will deploy the Provider service as Kubernetes deployment with an accompanying Kubernetes Service based
off the &lt;a href="#configuration"&gt;configuration provided.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Pipeline</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/pipeline/</guid><description>&lt;p&gt;The Pipeline resource represents the lifecycle of ML pipelines.
Pipelines can be created, updated and deleted via this resource.
The operator compiles the pipeline into a deployable artifact while providing compile time parameters as environment
variables.
It then submits the pipeline to Kubeflow and manages versions accordingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;quickstart:v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;framework&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;tfx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;components&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;base_pipeline.create_components&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.provider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The namespace and name of the associated &lt;a href="../provider/"&gt;Provider resource&lt;/a&gt; separated by a &lt;code&gt;/&lt;/code&gt;, e.g. &lt;code&gt;provider-namespace/provider-name&lt;/code&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.image&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Container image containing TFX component definitions.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.env[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;List of named objects. These will be provided by the compiler to the pipeline/components function as environment variables&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.framework.name&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Sets a specific &lt;a href="../../frameworks"&gt;pipeline framework&lt;/a&gt; to use.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.framework.parameters&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Parameters to pass to the pipeline framework compiler. A map of any parameters required by that framework can be passed, e.g. &lt;code&gt;components: base_pipeline.create_components&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt;
&lt;p&gt;Pipeline parameters can be updated at compile time. Pipeline versions therefore have to reflect both the pipelines image
and its configuration. The operator calculates a hash over the pipeline spec and appends it to the image version
to reflect this, for example: &lt;code&gt;v1-cf23df2207d99a74fbe169e3eba035e633b65d94&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Pipeline</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/pipeline/</guid><description>&lt;p&gt;The Pipeline resource represents the lifecycle of ML pipelines.
Pipelines can be created, updated and deleted via this resource.
The operator compiles the pipeline into a deployable artifact while providing compile time parameters as environment variables.
It then submits the pipeline to Kubeflow and manages versions accordingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1alpha6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp-quickstart:v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;tfxComponents&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;base_pipeline.create_components&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.image&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Container image containing TFX component definitions.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.tfxComponents&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Fully qualified name of the Python function creating pipeline components.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.env[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;List of named objects. These will be provided to the &lt;code&gt;tfxComponents&lt;/code&gt; function as environment variables.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.beamArgs[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;List of named objects. These will be provided as &lt;code&gt;beam_pipeline_args&lt;/code&gt; when compiling the pipeline.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt;
&lt;p&gt;Pipeline parameters can be updated at compile time. Pipeline versions therefore have to reflect both the pipelines image as well as its configuration. The operator calculates a hash over the pipeline spec and appends it to the image version to reflect this, for example: &lt;code&gt;v1-cf23df2207d99a74fbe169e3eba035e633b65d94&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Pipeline</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/pipeline/</guid><description>&lt;p&gt;The Pipeline resource represents the lifecycle of ML pipelines.
Pipelines can be created, updated and deleted via this resource.
The operator compiles the pipeline into a deployable artifact while providing compile time parameters as environment
variables.
It then submits the pipeline to Kubeflow and manages versions accordingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp-quickstart:v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;framework&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;tfx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;components&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;base_pipeline.create_components&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.provider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The namespace and name of the associated &lt;a href="../provider/"&gt;Provider resource&lt;/a&gt; separated by a &lt;code&gt;/&lt;/code&gt;, e.g. &lt;code&gt;provider-namespace/provider-name&lt;/code&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.image&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Container image containing TFX component definitions.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.env&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;List of named objects. These will be provided to the &lt;code&gt;tfxComponents&lt;/code&gt; function as environment variables.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.framework.name&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Sets a specific &lt;a href="../../frameworks"&gt;pipeline framework&lt;/a&gt; to use.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.framework.parameters&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Parameters to pass to the pipeline framework compiler. A map of any parameters required by that framework can be passed, e.g. &lt;code&gt;components: base_pipeline.create_components&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt;
&lt;p&gt;Pipeline parameters can be updated at compile time. Pipeline versions therefore have to reflect both the pipelines image
and its configuration. The operator calculates a hash over the pipeline spec and appends it to the image version
to reflect this, for example: &lt;code&gt;v1-cf23df2207d99a74fbe169e3eba035e633b65d94&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Pipeline Training</title><link>https://sky-uk.github.io/kfp-operator/docs/examples/pipeline_training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/examples/pipeline_training/</guid><description>&lt;p&gt;This tutorial walks you through the creation of a simple TFX pipeline on Kubeflow Pipelines and shows you how to manage pipelines via Kubernetes Custom Resources.&lt;/p&gt;
&lt;p&gt;The examples for this tutorial can be found on &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/docs-gen/includes/master/quickstart"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="1-build-the-pipeline"&gt;1. Build the Pipeline&lt;/h2&gt;
&lt;p&gt;We use the same pipeline as the &lt;a href="https://www.tensorflow.org/tfx/tutorials/tfx/penguin_simple"&gt;TFX example&lt;/a&gt; with a few modifications.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;pipeline.py&lt;/code&gt;.&lt;/p&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; typing &lt;span style="color:#f92672"&gt;import&lt;/span&gt; List, Text
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; tfx.components &lt;span style="color:#f92672"&gt;import&lt;/span&gt; CsvExampleGen, Pusher, Trainer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; tfx.dsl.components.base.base_node &lt;span style="color:#f92672"&gt;import&lt;/span&gt; BaseNode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; tfx.proto &lt;span style="color:#f92672"&gt;import&lt;/span&gt; pusher_pb2, trainer_pb2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; tfx.orchestration.data_types &lt;span style="color:#f92672"&gt;import&lt;/span&gt; RuntimeParameter
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;### Environmental parameters can be left out when using the operator.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;### Also, the return type is now a list of components instead of a pipeline.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#def create_pipeline(pipeline_name: str, pipeline_root: str, data_root: str,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# module_file: str, serving_model_dir: str,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# metadata_path: str) -&amp;gt; tfx.dsl.Pipeline:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;create_components&lt;/span&gt;() &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; List[BaseNode]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;Creates a penguin pipeline with TFX.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Brings data into the pipeline.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; example_gen &lt;span style="color:#f92672"&gt;=&lt;/span&gt; CsvExampleGen(input_base&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/data&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Uses user-provided Python function that trains a model.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; trainer &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Trainer(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; run_fn&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;penguin_pipeline.trainer.run_fn&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; examples&lt;span style="color:#f92672"&gt;=&lt;/span&gt;example_gen&lt;span style="color:#f92672"&gt;.&lt;/span&gt;outputs[&lt;span style="color:#e6db74"&gt;&amp;#39;examples&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; train_args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;trainer_pb2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TrainArgs(num_steps&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; eval_args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;trainer_pb2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;EvalArgs(num_steps&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;## Pushes the model to a filesystem destination.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pusher &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Pusher(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; model&lt;span style="color:#f92672"&gt;=&lt;/span&gt;trainer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;outputs[&lt;span style="color:#e6db74"&gt;&amp;#39;model&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; push_destination&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RuntimeParameter(name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;push_destination&amp;#34;&lt;/span&gt;, ptype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;Text))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Following three components will be included in the pipeline.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; components &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; example_gen,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; trainer,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pusher
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;### When using the operator, it creates the pipeline for us, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;### so we return the components directly instead.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#return tfx.dsl.Pipeline(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# pipeline_name=pipeline_name,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# pipeline_root=pipeline_root,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# metadata_connection_config=tfx.orchestration.metadata&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# .sqlite_metadata_connection_config(metadata_path),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# components=components)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; components
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;code&gt;trainer.py&lt;/code&gt;.
The training code remains unchanged:&lt;/p&gt;</description></item><item><title>Pipeline Training</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_training/</guid><description>&lt;p&gt;This tutorial walks you through the creation of a simple TFX pipeline on Kubeflow Pipelines and shows you how to manage pipelines via Kubernetes Custom Resources.&lt;/p&gt;
&lt;p&gt;The examples for this tutorial can be found on &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/docs-gen/includes/versions/v0.6.0/quickstart"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="1-build-the-pipeline"&gt;1. Build the Pipeline&lt;/h2&gt;
&lt;p&gt;We use the same pipeline as the &lt;a href="https://www.tensorflow.org/tfx/tutorials/tfx/penguin_simple"&gt;TFX example&lt;/a&gt; with a few modifications.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;pipeline.py&lt;/code&gt;.
Note that the pipeline definition itself is simpler because all infrastructure references, like pusher and pipeline root, will be injected by the operator before the pipeline is uploaded to Kubeflow:&lt;/p&gt;</description></item><item><title>Pipeline Training</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/examples/pipeline_training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/examples/pipeline_training/</guid><description>&lt;p&gt;This tutorial walks you through the creation of a simple TFX pipeline on Kubeflow Pipelines and shows you how to manage pipelines via Kubernetes Custom Resources.&lt;/p&gt;
&lt;p&gt;The examples for this tutorial can be found on &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/docs-gen/includes/versions/v0.7.0/quickstart"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="1-build-the-pipeline"&gt;1. Build the Pipeline&lt;/h2&gt;
&lt;p&gt;We use the same pipeline as the &lt;a href="https://www.tensorflow.org/tfx/tutorials/tfx/penguin_simple"&gt;TFX example&lt;/a&gt; with a few modifications.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;pipeline.py&lt;/code&gt;.
Note that the pipeline definition itself is simpler because all infrastructure references, like pusher and pipeline root, will be injected by the operator before the pipeline is uploaded to Kubeflow:&lt;/p&gt;</description></item><item><title>TensorFlow Extended (TFX)</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/tfx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/tfx/</guid><description>&lt;p&gt;To create a TFX pipeline:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure your &lt;a href="../providers/overview/"&gt;Provider&lt;/a&gt; supports TFX by specifying the TFX image in &lt;code&gt;spec.frameworks[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="../resources/pipeline/"&gt;Pipeline resource&lt;/a&gt;, specifying:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;tfx&lt;/code&gt; framework in &lt;code&gt;spec.framework.name&lt;/code&gt;. This needs to match the name specified in the Provider.&lt;/li&gt;
&lt;li&gt;the fully qualified name of the Python function creating TFX pipeline components under &lt;code&gt;spec.framework.parameters[].components&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;any required &lt;a href="https://www.tensorflow.org/tfx/guide/beam#beam_pipeline_arguments"&gt;beam arguments&lt;/a&gt; under &lt;code&gt;spec.framework.parameters[].beamArgs&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tfx-parameters"&gt;TFX Parameters&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;components&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Fully qualified name of the Python function creating TFX pipeline components.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;beamArgs[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;List of named objects. These will be provided as &lt;code&gt;beam_pipeline_args&lt;/code&gt; when compiling the pipeline.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="tfx-pipeline-resource-example"&gt;TFX Pipeline resource example&lt;/h3&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp-quickstart:v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;framework&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;tfx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin_pipeline.pipeline.create_components&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;beamArgs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;anArg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;aValue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Upgrade Guide</title><link>https://sky-uk.github.io/kfp-operator/docs/operator-manual/upgrade-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/operator-manual/upgrade-guide/</guid><description>&lt;h2 id="upgrading-to-a-new-crd-version"&gt;Upgrading to a New CRD Version&lt;/h2&gt;
&lt;p&gt;Upgrading the KFP Operator to a new CRD version is quite simple. These are the steps you need to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure the &lt;code&gt;manager.multiversion.storedVersion&lt;/code&gt; field in your Helm values (&lt;code&gt;values.yaml&lt;/code&gt; file) is set to the new version, e.g. &lt;code&gt;manager.multiversion.storedVersion: v1beta1&lt;/code&gt; (see &lt;a href="../../reference/configuration"&gt;Configuration&lt;/a&gt; for a full list of configuration options). This field will always be set to the latest CRD version in the default Helm values, so you can omit this step if you&amp;rsquo;re not overriding the default values with your own &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Install/upgrade the operator in the desired cluster as normal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="upgrading-to-an-unstable-crd-version"&gt;Upgrading to an Unstable CRD Version&lt;/h2&gt;
&lt;p&gt;If you want to upgrade the KFP Operator to a CRD version that hasn&amp;rsquo;t been marked as stable yet (e.g. from the latest commit on &lt;code&gt;master&lt;/code&gt; instead of a stable GitHub release) and you want to ensure that rolling back to a stable version is easy, you can override the default stored version to be the currently stable version:&lt;/p&gt;</description></item><item><title>Upgrade Guide</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/operator-manual/upgrade-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/operator-manual/upgrade-guide/</guid><description>&lt;h2 id="upgrading-to-a-new-crd-version"&gt;Upgrading to a New CRD Version&lt;/h2&gt;
&lt;p&gt;Upgrading the KFP Operator to a new CRD version is quite simple. These are the steps you need to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure the &lt;code&gt;manager.multiversion.storedVersion&lt;/code&gt; field in your Helm values (&lt;code&gt;values.yaml&lt;/code&gt; file) is set to the new version, e.g. &lt;code&gt;manager.multiversion.storedVersion: v1beta1&lt;/code&gt; (see &lt;a href="../../reference/configuration"&gt;Configuration&lt;/a&gt; for a full list of configuration options). This field will always be set to the latest CRD version in the default Helm values, so you can omit this step if you&amp;rsquo;re not overriding the default values with your own &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Install/upgrade the operator in the desired cluster as normal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="upgrading-to-an-unstable-crd-version"&gt;Upgrading to an Unstable CRD Version&lt;/h2&gt;
&lt;p&gt;If you want to upgrade the KFP Operator to a CRD version that hasn&amp;rsquo;t been marked as stable yet (e.g. from the latest commit on &lt;code&gt;master&lt;/code&gt; instead of a stable GitHub release) and you want to ensure that rolling back to a stable version is easy, you can override the default stored version to be the currently stable version:&lt;/p&gt;</description></item><item><title>v1alpha5 to v1alpha6</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/migration/v1alpha6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/migration/v1alpha6/</guid><description>&lt;p&gt;This guide documents how to upgrade &lt;code&gt;pipelines.kubeflow.org&lt;/code&gt; resources from &lt;code&gt;v1alpha5&lt;/code&gt; to &lt;code&gt;v1alpha6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow the steps below for every &lt;code&gt;Pipeline&lt;/code&gt;, &lt;code&gt;RunConfiguration&lt;/code&gt;, &lt;code&gt;Experiment&lt;/code&gt;, &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;RunSchedule&lt;/code&gt;, and &lt;code&gt;Provider&lt;/code&gt; you deploy yourself.&lt;/p&gt;
&lt;h2 id="pipeline"&gt;Pipeline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;apiVersion&lt;/code&gt; from &lt;code&gt;pipelines.kubeflow.org/v1alpha5&lt;/code&gt; to &lt;code&gt;pipelines.kubeflow.org/v1alpha6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;spec.provider&lt;/code&gt; to the value of the &lt;code&gt;pipelines.kubeflow.org/provider&lt;/code&gt; annotation in &lt;code&gt;metadata.annotations&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;pipelines.kubeflow.org/provider&lt;/code&gt; annotation from &lt;code&gt;metadata.annotations&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;The example below shows the required changes for migrating a Pipeline resource from &lt;code&gt;v1alpha5&lt;/code&gt; to &lt;code&gt;v1alpha6&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>v1alpha5 to v1alpha6</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/migration/v1alpha6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/migration/v1alpha6/</guid><description>&lt;p&gt;This guide documents how to upgrade &lt;code&gt;pipelines.kubeflow.org&lt;/code&gt; resources from &lt;code&gt;v1alpha5&lt;/code&gt; to &lt;code&gt;v1alpha6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow the steps below for every &lt;code&gt;Pipeline&lt;/code&gt;, &lt;code&gt;RunConfiguration&lt;/code&gt;, &lt;code&gt;Experiment&lt;/code&gt;, &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;RunSchedule&lt;/code&gt;, and &lt;code&gt;Provider&lt;/code&gt; you deploy yourself.&lt;/p&gt;
&lt;h2 id="pipeline"&gt;Pipeline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;apiVersion&lt;/code&gt; from &lt;code&gt;pipelines.kubeflow.org/v1alpha5&lt;/code&gt; to &lt;code&gt;pipelines.kubeflow.org/v1alpha6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;spec.provider&lt;/code&gt; to the value of the &lt;code&gt;pipelines.kubeflow.org/provider&lt;/code&gt; annotation in &lt;code&gt;metadata.annotations&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;pipelines.kubeflow.org/provider&lt;/code&gt; annotation from &lt;code&gt;metadata.annotations&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;The example below shows the required changes for migrating a Pipeline resource from &lt;code&gt;v1alpha5&lt;/code&gt; to &lt;code&gt;v1alpha6&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Introduction</title><link>https://sky-uk.github.io/kfp-operator/docs/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/getting-started/introduction/</guid><description>&lt;h2 id="compatibility"&gt;Compatibility&lt;/h2&gt;
&lt;p&gt;The operator currently supports&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TFX Pipelines with Python 3.7 and 3.9&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubeflow-pipelines.readthedocs.io/"&gt;Kubeflow Pipelines SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex AI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tfx-pipelines-and-components"&gt;TFX Pipelines and Components&lt;/h2&gt;
&lt;p&gt;Unlike imperative Kubeflow Pipelines deployments, the operator takes care of providing all environment-specific configuration and setup for the pipelines. Pipeline creators therefore don&amp;rsquo;t have to provide DAG runners, metadata configs, etc.&lt;/p&gt;
&lt;p&gt;For running a pipeline using the operator, only the list of TFX components needs to be returned. Everything else is done by the operator. See the &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/docs-gen/includes/master/quickstart/penguin_pipeline/pipeline.py"&gt;penguin pipeline&lt;/a&gt; for an example.&lt;/p&gt;</description></item><item><title>Introduction</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/introduction/</guid><description>&lt;h2 id="compatibility"&gt;Compatibility&lt;/h2&gt;
&lt;p&gt;The operator currently supports&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TFX Pipelines with Python 3.7 and 3.9 - pipelines created using the KFP DSL are not supported yet&lt;/li&gt;
&lt;li&gt;KFP standalone (a full KFP installation is not supported yet) and Vertex AI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tfx-pipelines-and-components"&gt;TFX Pipelines and Components&lt;/h2&gt;
&lt;p&gt;Unlike imperative Kubeflow Pipelines deployments, the operator takes care of providing all environment-specific configuration and setup for the pipelines. Pipeline creators therefore don&amp;rsquo;t have to provide DAG runners, metadata configs, serving directories, etc. Furthermore, pusher is not required and the operator can extend the pipeline with this very environment-specific component.&lt;/p&gt;</description></item><item><title>Introduction</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/introduction/</guid><description>&lt;h2 id="compatibility"&gt;Compatibility&lt;/h2&gt;
&lt;p&gt;The operator currently supports&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TFX Pipelines with Python 3.7 and 3.9 - pipelines created using the KFP DSL are not supported yet&lt;/li&gt;
&lt;li&gt;KFP standalone (a full KFP installation is not supported yet) and Vertex AI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tfx-pipelines-and-components"&gt;TFX Pipelines and Components&lt;/h2&gt;
&lt;p&gt;Unlike imperative Kubeflow Pipelines deployments, the operator takes care of providing all environment-specific configuration and setup for the pipelines. Pipeline creators therefore don&amp;rsquo;t have to provide DAG runners, metadata configs, serving directories, etc. Furthermore, pusher is not required and the operator can extend the pipeline with this very environment-specific component.&lt;/p&gt;</description></item><item><title>Kubeflow Pipelines SDK (KFP SDK)</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/kfpsdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/kfpsdk/</guid><description>&lt;p&gt;To create a KFP SDK pipeline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure your &lt;a href="../providers/overview/"&gt;Provider&lt;/a&gt; supports KFP SDK by specifying the KFP SDK image in &lt;code&gt;spec.frameworks[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="../resources/pipeline/"&gt;Pipeline resource&lt;/a&gt;, specifying:
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;kfpsdk&lt;/code&gt; framework in &lt;code&gt;spec.framework.name&lt;/code&gt;. This needs to match the name specified in the Provider.&lt;/li&gt;
&lt;li&gt;the fully qualified name of the Python function that creates a KFP SDK pipeline under &lt;code&gt;spec.framework.parameters[].pipeline&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kfp-sdk-parameters"&gt;KFP SDK Parameters&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Fully qualified name of the Python function creating a KFP SDK pipeline. This function should be wrapped using the &lt;a href="https://kubeflow-pipelines.readthedocs.io/en/2.0.0b6/source/dsl.html#kfp.dsl.pipeline"&gt;&lt;code&gt;kfp.dsl.Pipeline&lt;/code&gt; decorator&lt;/a&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="kfp-sdk-pipeline-resource-example"&gt;KFP SDK Pipeline resource example&lt;/h3&gt;
 &lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfpsdk-quickstart&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp-operator-kfpsdk-quickstart:v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;framework&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfpsdk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;getting_started.pipeline.add_pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Pipeline Dependencies</title><link>https://sky-uk.github.io/kfp-operator/docs/examples/pipeline_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/examples/pipeline_dependencies/</guid><description>&lt;p&gt;Pipeline dependencies allow splitting up larger machine learning pipelines into sub-pipelines. This is particularly useful when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data of an earlier step changes at a lower frequency than the data for subsequent steps&lt;/li&gt;
&lt;li&gt;Outputs of an earlier step could be shared between pipelines to avoid re-processing the same data&lt;/li&gt;
&lt;li&gt;Serving a combined model of two or more pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, we break up the penguin example pipeline into two pipelines:&lt;/p&gt;</description></item><item><title>Pipeline Dependencies</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_dependencies/</guid><description>&lt;p&gt;Pipeline dependencies allow splitting up larger machine learning pipelines into sub-pipelines. This is particularly useful when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data of an earlier step changes at a lower frequency than the data for subsequent steps&lt;/li&gt;
&lt;li&gt;Outputs of an earlier step could be shared between pipelines to avoid re-processing the same data&lt;/li&gt;
&lt;li&gt;Serving a combined model of two or more pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, we break up the penguin example pipeline into two pipelines:&lt;/p&gt;</description></item><item><title>Pipeline Dependencies</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/examples/pipeline_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/examples/pipeline_dependencies/</guid><description>&lt;p&gt;Pipeline dependencies allow splitting up larger machine learning pipelines into sub-pipelines. This is particularly useful when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data of an earlier step changes at a lower frequency than the data for subsequent steps&lt;/li&gt;
&lt;li&gt;Outputs of an earlier step could be shared between pipelines to avoid re-processing the same data&lt;/li&gt;
&lt;li&gt;Serving a combined model of two or more pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, we break up the penguin example pipeline into two pipelines:&lt;/p&gt;</description></item><item><title>RunConfiguration</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/runconfiguration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/runconfiguration/</guid><description>&lt;p&gt;The RunConfiguration resource represents the lifecycle of recurring runs (aka Jobs in KFP).
Pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;RunConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-recurring-run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;push_destination&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;filesystem&amp;#34;:{&amp;#34;base_directory&amp;#34;:&amp;#34;gs://my-bucket/penguin-pipeline&amp;#34;}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;triggers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cronExpression&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;startTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-01-01T00:00:00Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;endTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-12-31T23:59:59Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;onChange&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;base-namespace/dependency-rc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Run Configuration can have one of more triggers that determine when the next training run will be started.&lt;/p&gt;</description></item><item><title>RunConfiguration</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/runconfiguration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/runconfiguration/</guid><description>&lt;p&gt;The RunConfiguration resource represents the lifecycle of recurring runs (aka Jobs in KFP).
Pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1alpha6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;RunConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-recurring-run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runtimeParameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;triggers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cronExpression&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;startTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-01-01T00:00:00Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;endTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-12-31T23:59:59Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;onChange&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;dependency-rc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Run Configuration can have one of more triggers that determine when the next training run will be started.&lt;/p&gt;</description></item><item><title>RunConfiguration</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/runconfiguration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/runconfiguration/</guid><description>&lt;p&gt;The RunConfiguration resource represents the lifecycle of recurring runs (aka Jobs in KFP).
Pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;RunConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-recurring-run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;triggers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cronExpression&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;startTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-01-01T00:00:00Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;endTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-12-31T23:59:59Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;onChange&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;base-namespace/dependency-rc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Run Configuration can have one of more triggers that determine when the next training run will be started.&lt;/p&gt;</description></item><item><title>v1alpha6 to v1beta1</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/migration/v1beta1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/migration/v1beta1/</guid><description>&lt;p&gt;This guide documents how to upgrade &lt;code&gt;pipelines.kubeflow.org&lt;/code&gt; resources from &lt;code&gt;v1alpha6&lt;/code&gt; to &lt;code&gt;v1beta1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow the steps below for every &lt;code&gt;Pipeline&lt;/code&gt;, &lt;code&gt;RunConfiguration&lt;/code&gt;, &lt;code&gt;Experiment&lt;/code&gt;, &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;RunSchedule&lt;/code&gt;, and &lt;code&gt;Provider&lt;/code&gt; you deploy yourself.&lt;/p&gt;
&lt;h2 id="pipeline"&gt;Pipeline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;apiVersion&lt;/code&gt; from &lt;code&gt;pipelines.kubeflow.org/v1alpha6&lt;/code&gt; to &lt;code&gt;pipelines.kubeflow.org/v1beta1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;spec.provider&lt;/code&gt; field includes the namespace that the Provider resource is deployed in.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;spec.framework&lt;/code&gt;, which is an object with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;parameters&lt;/code&gt; fields. &lt;code&gt;parameters&lt;/code&gt; are framework specific parameters, such as &lt;code&gt;components&lt;/code&gt; and &lt;code&gt;beamArgs&lt;/code&gt;. To use the &lt;code&gt;tfx&lt;/code&gt; framework that was the only option under versions &lt;code&gt;v1alpha6&lt;/code&gt; and below, set the &lt;code&gt;name&lt;/code&gt; field to &lt;code&gt;tfx&lt;/code&gt;, add the path to the function that returns the tfx components under &lt;code&gt;spec.framework.parameters.components&lt;/code&gt;, and add any required beamArgs like the example below.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;spec.tfxComponents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;spec.beamArgs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;The example below shows the required changes for migrating a Pipeline resource from &lt;code&gt;v1alpha6&lt;/code&gt; to &lt;code&gt;v1beta1&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>v1alpha6 to v1beta1</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/migration/v1beta1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/migration/v1beta1/</guid><description>&lt;p&gt;This guide documents how to upgrade &lt;code&gt;pipelines.kubeflow.org&lt;/code&gt; resources from &lt;code&gt;v1alpha6&lt;/code&gt; to &lt;code&gt;v1beta1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow the steps below for every &lt;code&gt;Pipeline&lt;/code&gt;, &lt;code&gt;RunConfiguration&lt;/code&gt;, &lt;code&gt;Experiment&lt;/code&gt;, &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;RunSchedule&lt;/code&gt;, and &lt;code&gt;Provider&lt;/code&gt; you deploy yourself.&lt;/p&gt;
&lt;h2 id="pipeline"&gt;Pipeline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;apiVersion&lt;/code&gt; from &lt;code&gt;pipelines.kubeflow.org/v1alpha6&lt;/code&gt; to &lt;code&gt;pipelines.kubeflow.org/v1beta1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;spec.provider&lt;/code&gt; field includes the namespace that the Provider resource is deployed in.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;spec.framework&lt;/code&gt;, which is an object with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;parameters&lt;/code&gt; fields. &lt;code&gt;parameters&lt;/code&gt; are framework specific parameters, such as &lt;code&gt;components&lt;/code&gt; and &lt;code&gt;beamArgs&lt;/code&gt;. To use the &lt;code&gt;tfx&lt;/code&gt; framework that was the only option under versions &lt;code&gt;v1alpha6&lt;/code&gt; and below, set the &lt;code&gt;name&lt;/code&gt; field to &lt;code&gt;tfx&lt;/code&gt;, add the path to the function that returns the tfx components under &lt;code&gt;spec.frameworks.components&lt;/code&gt;, and add any required beamArgs like the example below.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;spec.tfxComponents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;spec.beamArgs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;The example below shows the required changes for migrating a Pipeline resource from &lt;code&gt;v1alpha6&lt;/code&gt; to &lt;code&gt;v1beta1&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Adding a custom pipeline framework</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/frameworks/custom/</guid><description>&lt;p&gt;If your desired framework is not &lt;a href="../"&gt;natively supported by the KFP Operator&lt;/a&gt;, you can provide a custom Docker image that contains the necessary dependencies and code to compile pipelines using your desired framework.&lt;/p&gt;
&lt;p&gt;This image should be pushed to a container registry that the KFP Operator deployment has access to. e.g. &lt;code&gt;ghcr.io/kfp-operator/kfp-operator-custom-compiler:version-tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Follow these steps to build the image and configure your installation of the KFP Operator:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow the steps in the &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/compilers/README.md"&gt;compilers README&lt;/a&gt; to build your custom Docker image, ensuring it conforms to the correct structure. Examples of the structure can be found in the code for the natively supported frameworks. This image will be called by a set of Argo Workflows, with &lt;a href="#compiler-workflow"&gt;these parameters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Publish the Docker image to a repository accessible via the KFP Operator deployment.&lt;/li&gt;
&lt;li&gt;Update your &lt;a href="../../providers/overview/"&gt;Provider&lt;/a&gt; resource to support your custom framework by specifying your framework name and image in &lt;code&gt;spec.frameworks[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To then use the custom framework in a &lt;a href="../../resources/pipeline/#fields"&gt;Pipeline&lt;/a&gt; resource, simply configure &lt;code&gt;spec.framework&lt;/code&gt; to take the same name as the framework set in the Provider resource, and any additional parameters that your framework requires.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="compiler-workflow"&gt;Compiler Workflow&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;kfp-operator-create-compiled&lt;/code&gt; workflow &lt;code&gt;compile&lt;/code&gt; step accepts the following parameters:&lt;/p&gt;</description></item><item><title>Installation</title><link>https://sky-uk.github.io/kfp-operator/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/getting-started/installation/</guid><description>&lt;p&gt;We recommend the installation using Helm as it allows a declarative approach to managing Kubernetes resources.&lt;/p&gt;
&lt;p&gt;This guide assumes you are familiar with &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-workflows/installation/"&gt;Argo 3.1.6-3.3&lt;/a&gt; installed cluster-wide or into the namespace where the operator&amp;rsquo;s workflows run (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-events/installation/"&gt;Argo-Events 1.7.4+&lt;/a&gt; installed cluster-wide (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kfp-operator"&gt;KFP-Operator&lt;/h2&gt;
&lt;p&gt;To get a working installation you will need to install both the KFP-Operator and at least one provider (&lt;a href="#providers" title="Providers"&gt;see below&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id="build-and-install"&gt;Build and Install&lt;/h3&gt;
&lt;p&gt;Create basic &lt;code&gt;values.yaml&lt;/code&gt; with the following content:&lt;/p&gt;</description></item><item><title>Installation</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/getting-started/installation/</guid><description>&lt;p&gt;We recommend the installation using Helm as it allows a declarative approach to managing Kubernetes resources.&lt;/p&gt;
&lt;p&gt;This guide assumes you are familiar with &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-workflows/installation/"&gt;Argo 3.1.6-3.3&lt;/a&gt; installed cluster-wide or into the namespace where the operator&amp;rsquo;s workflows run (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-events/installation/"&gt;Argo-Events 1.7.4+&lt;/a&gt; installed cluster-wide (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kfp-operator"&gt;KFP-Operator&lt;/h2&gt;
&lt;p&gt;To get a working installation you will need to install both the KFP-Operator and at least one provider (&lt;a href="#providers" title="Providers"&gt;see below&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id="build-and-install"&gt;Build and Install&lt;/h3&gt;
&lt;p&gt;Create basic &lt;code&gt;values.yaml&lt;/code&gt; with the following content:&lt;/p&gt;</description></item><item><title>Installation</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/getting-started/installation/</guid><description>&lt;p&gt;We recommend the installation using Helm as it allows a declarative approach to managing Kubernetes resources.&lt;/p&gt;
&lt;p&gt;This guide assumes you are familiar with &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-workflows/installation/"&gt;Argo 3.1.6-3.3&lt;/a&gt; installed cluster-wide or into the namespace where the operator&amp;rsquo;s workflows run (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://argoproj.github.io/argo-events/installation/"&gt;Argo-Events 1.7.4+&lt;/a&gt; installed cluster-wide (see &lt;a href="../../reference/configuration"&gt;configuration&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kfp-operator"&gt;KFP-Operator&lt;/h2&gt;
&lt;p&gt;To get a working installation you will need to install both the KFP-Operator and at least one provider (&lt;a href="#providers" title="Providers"&gt;see below&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id="build-and-install"&gt;Build and Install&lt;/h3&gt;
&lt;p&gt;Create basic &lt;code&gt;values.yaml&lt;/code&gt; with the following content:&lt;/p&gt;</description></item><item><title>Run</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/run/</guid><description>&lt;p&gt;The Run resource represents the lifecycle of a one-off run.
One-off pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;generateName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-run-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;EXAMPLES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;valueFrom&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurationRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;base-namespace/penguin-pipeline-example-generator-runconfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;outputArtifact&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;examples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the usage of &lt;code&gt;metadata.generateName&lt;/code&gt; which tells Kubernetes to generate a new name based on the given prefix for every new resource.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, we expect users to deploy &lt;a href="../runconfiguration"&gt;RunConfigurations&lt;/a&gt; to configure the lifecycle of their runs, leaving the management of &lt;code&gt;Runs&lt;/code&gt; to the operator.&lt;/p&gt;</description></item><item><title>Run</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/run/</guid><description>&lt;p&gt;The Run resource represents the lifecycle of a one-off run.
One-off pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1alpha6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;generateName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-run-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runtimeParameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;EXAMPLES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;valueFrom&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurationRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-example-generator-runconfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;outputArtifact&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;examples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the usage of &lt;code&gt;metadata.generateName&lt;/code&gt; which tells Kubernetes to generate a new name based on the given prefix for every new resource.&lt;/p&gt;
&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.pipeline&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The &lt;a href="../pipeline/#identifier"&gt;identifier&lt;/a&gt; of the corresponding pipeline resource to run. If no version is specified, then the RunConfiguration will use the latest version of the specified pipeline.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.experimentName&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The name of the corresponding experiment resource (optional - the &lt;code&gt;Default&lt;/code&gt; Experiment as defined in the &lt;a href="README.md#configuration"&gt;Installation and Configuration section of the documentation&lt;/a&gt; will be used if no &lt;code&gt;experimentName&lt;/code&gt; is provided).&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.runtimeParameters[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Runtime parameters for the pipeline training run. See below for more information.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.run.artifacts[]&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Exposed output artifacts that will be included in run completion event when this run has succeeded. See below for more information.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="runtime-parameter-definition"&gt;Runtime Parameter Definition&lt;/h3&gt;
&lt;p&gt;A pipeline run can be parameterised using RunTimeParameters.&lt;/p&gt;</description></item><item><title>Run</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/run/</guid><description>&lt;p&gt;The Run resource represents the lifecycle of a one-off run.
One-off pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;generateName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-run-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;EXAMPLES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;valueFrom&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runConfigurationRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;base-namespace/penguin-pipeline-example-generator-runconfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;outputArtifact&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;examples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the usage of &lt;code&gt;metadata.generateName&lt;/code&gt; which tells Kubernetes to generate a new name based on the given prefix for every new resource.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, we expect users to deploy &lt;a href="../runconfiguration"&gt;RunConfigurations&lt;/a&gt; to configure the lifecycle of their runs, leaving the management of &lt;code&gt;Runs&lt;/code&gt; to the operator.&lt;/p&gt;</description></item><item><title>Run Completion Events</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/run-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/run-completion/</guid><description>&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/versions/v0.6.0/images/run-completion.svg" alt="Model Serving"&gt;&lt;/p&gt;
&lt;p&gt;The KFP-Operator Events system provides a &lt;a href="https://nats.io/"&gt;NATS Event bus&lt;/a&gt; in the operator namespace to consume events from.
To use it, users can create an Argo-Events &lt;a href="https://argoproj.github.io/argo-events/eventsources/setup/nats/"&gt;NATS Eventsource&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;argoproj.io/v1alpha1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;EventSource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;run-completion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nats&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run-completion&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;jsonBody&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;subject&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;events&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;url&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nats://eventbus-kfp-operator-events-stan-svc.kfp-operator.svc:4222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The specification of the events follows &lt;a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md"&gt;CloudEvents&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;{{ UNIQUE_MESSAGE_ID }}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;specversion&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;{{ PROVIDER_NAME }}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;org.kubeflow.pipelines.run-completion&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;datacontenttype&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;{{ PROVIDER_NAME }}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;succeeded|failed&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;pipelineName&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;{{ PIPELINE_NAME }}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;servingModelArtifacts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;{{ PIPELINE_NAME }}:{{ WORKFLOW_NAME }}:Pusher:pushed_model:{{ PUSHER_INDEX }}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;location&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;gs://{{ PIPELINE_ROOT }}/Pusher/pushed_model/{{ MODEL_VERSION }}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;artifacts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;serving-model&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;location&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;gs://{{ ARTIFACT_LOCATION }}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; currently, the event includes both &lt;code&gt;servingModelArtifacts&lt;/code&gt; and &lt;code&gt;artifacts&lt;/code&gt;:&lt;/p&gt;</description></item><item><title>Experiment</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/experiment/</guid><description>&lt;p&gt;The Experiment resource represents the lifecycle of Experiments,
and can be configured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1alpha6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;An experiment for the penguin pipeline&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.description&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The description of the experiment.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Pipeline Frameworks</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/frameworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/frameworks/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The KFP Operator supports multiple pipeline frameworks, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/tfx"&gt;TFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubeflow-pipelines.readthedocs.io/"&gt;KFP SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="compiler-workflow"&gt;Compiler Workflow&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;kfp-operator-create-compiled&lt;/code&gt; workflow &lt;code&gt;compile&lt;/code&gt; step accepts the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resource-image&lt;/strong&gt;: the image containing the model code (looked up from the pipeline resource in preview workflow step)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;provider-config&lt;/strong&gt;: the provider configuration (&lt;a href="../providers/overview"&gt;see provider overview&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pipeline-framework-image&lt;/strong&gt;: the image for the pipeline framework compiler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The image specified in &lt;code&gt;pipeline-framework-image&lt;/code&gt; is executed as a initContainer and runs the entrypoint script. The entrypoint
script should copy the required compiler code into the shared directory &lt;code&gt;/shared&lt;/code&gt; (which is mirrored into the main container) and then exit. This &lt;code&gt;/shared&lt;/code&gt; location is passed as
the first and only parameter to the entrypoint script.&lt;/p&gt;</description></item><item><title>RunSchedule</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/runschedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/runschedule/</guid><description>&lt;p&gt;The RunSchedule resource represents the lifecycle of scheduled runs.&lt;/p&gt;
&lt;p&gt;Schedules for pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;RunSchedule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;generateName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-run-schedule-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;cronExpression&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;startTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-01-01T00:00:00Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;endTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-12-31T23:59:59Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the usage of &lt;code&gt;metadata.generateName&lt;/code&gt; which tells Kubernetes to generate a new name based on the given prefix for every new resource.&lt;/p&gt;</description></item><item><title>RunSchedule</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/runschedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/runschedule/</guid><description>&lt;p&gt;The RunSchedule resource represents the lifecycle of scheduled runs.&lt;/p&gt;
&lt;p&gt;Schedules for pipeline training runs can be configured using this resource as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;RunSchedule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;generateName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline-run-schedule-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;artifacts&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;serving-model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Pusher:pushed_model:0[pushed == 1]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;experimentName&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pipeline&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TRAINING_RUNS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;cronExpression&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;startTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-01-01T00:00:00Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;endTime&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-12-31T23:59:59Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the usage of &lt;code&gt;metadata.generateName&lt;/code&gt; which tells Kubernetes to generate a new name based on the given prefix for every new resource.&lt;/p&gt;</description></item><item><title>Using Multiple Providers</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/providers/</guid><description>&lt;p&gt;The KFP operator supports multiple provider backends.&lt;/p&gt;
&lt;p&gt;Changing the provider of a resource that was previously managed by another provider will result in the resource erroring.
Any referenced resources must always match the provider of the referencing resource (e.g. RunConfiguration to Pipeline) as updates are not propagated or checked and will result in runtime errors on the provider.&lt;/p&gt;</description></item><item><title>Debugging</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/debugging/</guid><description>&lt;h2 id="kubernetes-events"&gt;Kubernetes Events&lt;/h2&gt;
&lt;p&gt;The operator emits Kubernetes events for all resource transitions which can be viewed using &lt;code&gt;kubectl describe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl describe pipeline pipeline-sample
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Events:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type Reason Age From Message
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ---- ------ ---- ---- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 5m54s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Warning SyncFailed 101s kfp-operator Failed &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;: pipeline update failed
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 9m47s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Synced 78s kfp-operator Succeeded &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="compiling-locally"&gt;Compiling locally&lt;/h2&gt;
&lt;p&gt;The KFP-Operator&amp;rsquo;s compiler can be used locally for debugging purposes. This can be especially useful for troubleshooting environment variable and beam argument resolution.&lt;/p&gt;</description></item><item><title>Experiment</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/experiment/</guid><description>&lt;p&gt;The Experiment resource represents the lifecycle of Experiments,
and can be configured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/provider-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;An experiment for the penguin pipeline&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.provider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The namespace and name of the associated &lt;a href="../provider/"&gt;Provider resource&lt;/a&gt; separated by a &lt;code&gt;/&lt;/code&gt;, e.g. &lt;code&gt;provider-namespace/provider-name&lt;/code&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.description&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The description of the experiment.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Experiment</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/experiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/experiment/</guid><description>&lt;p&gt;The Experiment resource represents the lifecycle of Experiments,
and can be configured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;apiVersion&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;pipelines.kubeflow.org/v1beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;kind&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;penguin-experiment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;provider&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;provider-namespace/kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;An experiment for the penguin pipeline&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="fields"&gt;Fields&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.provider&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The namespace and name of the associated &lt;a href="../provider/"&gt;Provider resource&lt;/a&gt; separated by a &lt;code&gt;/&lt;/code&gt;, e.g. &lt;code&gt;provider-namespace/provider-name&lt;/code&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.description&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The description of the experiment.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Provider</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/reference/resources/provider/</guid><description>&lt;p&gt;The Provider resource represents the provider specific configuration required to submit / update / delete ml resources with the given provider.
e.g Kubeflow Pipelines or the Vertex AI Platform.
Providers configuration can be set using this resource and permissions for access can be configured via service accounts.&lt;/p&gt;
&lt;h3 id="common-fields"&gt;Common Fields&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.image&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
 &lt;td&gt;Container image of the provider&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;kfp-operator-kfp-provider:0.0.2&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.executionMode&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
 &lt;td&gt;KFP compiler &lt;a href="https://kubeflow-pipelines.readthedocs.io/en/latest/source/kfp.dsl.html#kfp.dsl.PipelineExecutionMode"&gt;execution mode&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;v1&lt;/code&gt; (currently KFP) or &lt;code&gt;v2&lt;/code&gt; (Vertex AI)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.serviceAccount&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
 &lt;td&gt;Service Account name to be used for all provider-specific operations (see respective provider)&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;kfp-operator-vertex-ai&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.defaultBeamArgs&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Default Beam arguments to which the pipeline-defined ones will be added&lt;/td&gt;
 &lt;td&gt;&lt;pre&gt;- name: project&lt;br/&gt; value: my-gcp-project&lt;/pre&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;spec.pipelineRootStorage&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;The storage location used by &lt;a href="https://www.tensorflow.org/tfx/guide/build_tfx_pipeline"&gt;TFX (&lt;code&gt;pipeline-root&lt;/code&gt;)&lt;/a&gt; to store pipeline artifacts and outputs - this should be a top-level directory and not specific to a single pipeline&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;gcs://kubeflow-pipelines-bucket&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; field automatically populated by Helm based on provider type&lt;/p&gt;</description></item><item><title>Run Completion Events</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/run-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/run-completion/</guid><description>&lt;p&gt;Run completion events are created by a &lt;a href="../../reference/providers/overview"&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; to signal the completion of a pipeline run, and is used to trigger downstream processes.
Within the operator this can be updating the status fields of resources such as their &lt;code&gt;synchronizationState&lt;/code&gt; or &lt;code&gt;providerId&lt;/code&gt;. Within the ML Ops ecosystem,
this can also be used to reload a serving instance of a model with the newly trained version.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/master/images/run-completion.svg" alt="Model Serving"&gt;&lt;/p&gt;
&lt;h2 id="event-specification"&gt;Event Specification&lt;/h2&gt;
&lt;p&gt;The specification of the events follows &lt;a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md"&gt;CloudEvents&lt;/a&gt;:&lt;/p&gt;</description></item><item><title>Run Completion Events</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/run-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/run-completion/</guid><description>&lt;p&gt;Run completion events are created by a &lt;a href="../../reference/providers/overview"&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; to signal the completion of a pipeline run, and is used to trigger downstream processes.
Within the operator this can be updating the status fields of resources such as their &lt;code&gt;synchronizationState&lt;/code&gt; or &lt;code&gt;providerId&lt;/code&gt;. Within the ML Ops ecosystem,
this can also be used to reload a serving instance of a model with the newly trained version.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/versions/v0.7.0/images/run-completion.svg" alt="Model Serving"&gt;&lt;/p&gt;
&lt;h2 id="event-specification"&gt;Event Specification&lt;/h2&gt;
&lt;p&gt;The specification of the events follows &lt;a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md"&gt;CloudEvents&lt;/a&gt;:&lt;/p&gt;</description></item><item><title>Debugging</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/debugging/</guid><description>&lt;h2 id="kubernetes-events"&gt;Kubernetes Events&lt;/h2&gt;
&lt;p&gt;The operator emits Kubernetes events for all resource transitions which can be viewed using &lt;code&gt;kubectl describe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl describe pipeline pipeline-sample
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Events:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type Reason Age From Message
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ---- ------ ---- ---- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 5m54s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Warning SyncFailed 101s kfp-operator Failed &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;: pipeline update failed
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 9m47s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Synced 78s kfp-operator Succeeded &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="compiling-locally"&gt;Compiling locally&lt;/h2&gt;
&lt;p&gt;The KFP-Operator&amp;rsquo;s compiler can be used locally for debugging purposes. This can be especially useful for troubleshooting environment variable and beam argument resolution.&lt;/p&gt;</description></item><item><title>Debugging</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/debugging/</guid><description>&lt;h2 id="kubernetes-events"&gt;Kubernetes Events&lt;/h2&gt;
&lt;p&gt;The operator emits Kubernetes events for all resource transitions which can be viewed using &lt;code&gt;kubectl describe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl describe pipeline pipeline-sample
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Events:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type Reason Age From Message
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ---- ------ ---- ---- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 5m54s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Warning SyncFailed 101s kfp-operator Failed &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;v5-841641&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;: pipeline update failed
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Syncing 9m47s kfp-operator Updating &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Normal Synced 78s kfp-operator Succeeded &lt;span style="color:#f92672"&gt;[&lt;/span&gt;version: &lt;span style="color:#e6db74"&gt;&amp;#34;57be7f4-681dd8&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="compiling-locally"&gt;Compiling locally&lt;/h2&gt;
&lt;p&gt;The KFP-Operator&amp;rsquo;s compiler can be used locally for debugging purposes. This can be especially useful for troubleshooting environment variable and beam argument resolution.&lt;/p&gt;</description></item><item><title>Provider</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/resources/provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/resources/provider/</guid><description>&lt;p&gt;The Provider resource represents the provider specific configuration required to submit / update / delete ml resources
with the given provider.
e.g Kubeflow Pipelines or Vertex AI Platform.
Providers configuration can be set using this resource and permissions for access can be configured via service
accounts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: changing the provider of a resource that was previously managed by another provider will result in a resource
error.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Any referenced resources must always match the provider of the referencing resource (e.g. RunConfiguration to Pipeline)
as updates are not propagated or checked and will result in runtime errors on the provider.&lt;/p&gt;</description></item><item><title>Provider</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/resources/provider/</guid><description>&lt;p&gt;The Provider resource represents the provider specific configuration required to submit / update / delete ml resources
with the given provider.
e.g Kubeflow Pipelines or the Vertex AI Platform.
Providers configuration can be set using this resource and permissions for access can be configured via service
accounts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: changing the provider of a resource that was previously managed by another provider will result in a resource
error.
Any referenced resources must always match the provider of the referencing resource (e.g. RunConfiguration to
Pipeline)
as updates are not propagated or checked and will result in runtime errors on the provider.&lt;/p&gt;</description></item><item><title>Kubeflow Pipelines</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/kfp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/kfp/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Kubeflow Pipelines Provider Service&lt;/strong&gt; is included within this project to interface directly with
Kubeflow Pipelines. This service acts as a bridge between the KFP Operator and Kubeflow Pipelines, facilitating operations such as pipeline
submission, status monitoring, schedules and experiment management.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/versions/v0.7.0/images/kfp.svg" alt="KFP Provider"&gt;&lt;/p&gt;
&lt;h2 id="deployment-and-usage"&gt;Deployment and Usage&lt;/h2&gt;
&lt;p&gt;Set up the service with the necessary configurations, including API endpoints and authentication
credentials for the Kubeflow. &lt;a href="../../../getting-started/installation/#providers"&gt;See the getting started guide.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;KFP must be installed in &lt;a href="https://www.kubeflow.org/docs/components/pipelines/legacy-v1/installation/standalone-deployment/"&gt;standalone mode&lt;/a&gt;.
Its configuration can be controlled using the &lt;a href="../../resources/provider/#kubeflow"&gt;KFP specific parameters within a Provider Resource&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Kubeflow Pipelines V2</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/providers/kfp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/providers/kfp/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Kubeflow Pipelines Provider Service&lt;/strong&gt; is included within this project to interface directly with the
Kubeflow Pipelines V2 backend. This service acts as a bridge between the KFP Operator and Kubeflow Pipelines V2,
facilitating operations such as pipeline submission, status monitoring, schedules and experiment management.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/master/images/kfp.svg" alt="KFP Provider"&gt;&lt;/p&gt;
&lt;h2 id="deployment-and-usage"&gt;Deployment and Usage&lt;/h2&gt;
&lt;p&gt;Set up the service with the necessary configurations, including API endpoints and authentication
credentials for the Kubeflow Pipelines Provider. &lt;a href="../../../getting-started/installation/#providers"&gt;See the getting started guide.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Vertex AI</title><link>https://sky-uk.github.io/kfp-operator/docs/reference/providers/vai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/docs/reference/providers/vai/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Vertex AI (VAI) Provider Service&lt;/strong&gt; is included within this project to interface directly with
Google Cloud&amp;rsquo;s Vertex AI platform. This service acts as a bridge between the KFP Operator and Vertex AI, enabling
seamless management and execution of machine learning workflows.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/master/images/vai.svg" alt="VAI Provider"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: VAI does not support the &lt;code&gt;experiment&lt;/code&gt; resource&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="deployment-and-usage"&gt;Deployment and Usage&lt;/h2&gt;
&lt;p&gt;Set up the service with the necessary configurations, including API endpoints and authentication
credentials for the Vertex AI instance. &lt;a href="../../../getting-started/installation/#providers"&gt;See the getting started guide.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Vertex AI</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/vai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.7.0/reference/providers/vai/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Vertex AI (VAI) Provider Service&lt;/strong&gt; is included within this project to interface directly with
Google Cloud&amp;rsquo;s Vertex AI platform. This service acts as a bridge between the KFP Operator and Vertex AI, enabling
seamless management and execution of machine learning workflows.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sky-uk.github.io/kfp-operator/versions/v0.7.0/images/vai.svg" alt="VAI Provider"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: VAI does not support the &lt;code&gt;experiment&lt;/code&gt; resource&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="deployment-and-usage"&gt;Deployment and Usage&lt;/h2&gt;
&lt;p&gt;Set up the service with the necessary configurations, including API endpoints and authentication
credentials for the Vertex AI instance. &lt;a href="../../../getting-started/installation/#providers"&gt;See the getting started guide.&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>