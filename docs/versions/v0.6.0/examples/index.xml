<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on KFP-Operator</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/</link><description>Recent content in Examples on KFP-Operator</description><generator>Hugo</generator><language>en-gb</language><atom:link href="https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Pipeline Training</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_training/</guid><description>&lt;p&gt;This tutorial walks you through the creation of a simple TFX pipeline on Kubeflow Pipelines and shows you how to manage pipelines via Kubernetes Custom Resources.&lt;/p&gt;
&lt;p&gt;The examples for this tutorial can be found on &lt;a href="https://github.com/sky-uk/kfp-operator/blob/master/docs-gen/includes/versions/v0.6.0/quickstart"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="1-build-the-pipeline"&gt;1. Build the Pipeline&lt;/h2&gt;
&lt;p&gt;We use the same pipeline as the &lt;a href="https://www.tensorflow.org/tfx/tutorials/tfx/penguin_simple"&gt;TFX example&lt;/a&gt; with a few modifications.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;pipeline.py&lt;/code&gt;.
Note that the pipeline definition itself is simpler because all infrastructure references, like pusher and pipeline root, will be injected by the operator before the pipeline is uploaded to Kubeflow:&lt;/p&gt;</description></item><item><title>Pipeline Dependencies</title><link>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sky-uk.github.io/kfp-operator/versions/v0.6.0/examples/pipeline_dependencies/</guid><description>&lt;p&gt;Pipeline dependencies allow splitting up larger machine learning pipelines into sub-pipelines. This is particularly useful when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data of an earlier step changes at a lower frequency than the data for subsequent steps&lt;/li&gt;
&lt;li&gt;Outputs of an earlier step could be shared between pipelines to avoid re-processing the same data&lt;/li&gt;
&lt;li&gt;Serving a combined model of two or more pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, we break up the penguin example pipeline into two pipelines:&lt;/p&gt;</description></item></channel></rss>