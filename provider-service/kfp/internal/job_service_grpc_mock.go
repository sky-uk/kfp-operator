// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/pipelines/backend/api/go_client (interfaces: JobServiceClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_client "github.com/kubeflow/pipelines/backend/api/go_client"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockJobServiceClient is a mock of JobServiceClient interface.
type MockJobServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceClientMockRecorder
}

// MockJobServiceClientMockRecorder is the mock recorder for MockJobServiceClient.
type MockJobServiceClientMockRecorder struct {
	mock *MockJobServiceClient
}

// NewMockJobServiceClient creates a new mock instance.
func NewMockJobServiceClient(ctrl *gomock.Controller) *MockJobServiceClient {
	mock := &MockJobServiceClient{ctrl: ctrl}
	mock.recorder = &MockJobServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobServiceClient) EXPECT() *MockJobServiceClientMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJobServiceClient) CreateJob(arg0 context.Context, arg1 *go_client.CreateJobRequest, arg2 ...grpc.CallOption) (*go_client.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJob", varargs...)
	ret0, _ := ret[0].(*go_client.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobServiceClientMockRecorder) CreateJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobServiceClient)(nil).CreateJob), varargs...)
}

// DeleteJob mocks base method.
func (m *MockJobServiceClient) DeleteJob(arg0 context.Context, arg1 *go_client.DeleteJobRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJob", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobServiceClientMockRecorder) DeleteJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJobServiceClient)(nil).DeleteJob), varargs...)
}

// DisableJob mocks base method.
func (m *MockJobServiceClient) DisableJob(arg0 context.Context, arg1 *go_client.DisableJobRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableJob", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableJob indicates an expected call of DisableJob.
func (mr *MockJobServiceClientMockRecorder) DisableJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableJob", reflect.TypeOf((*MockJobServiceClient)(nil).DisableJob), varargs...)
}

// EnableJob mocks base method.
func (m *MockJobServiceClient) EnableJob(arg0 context.Context, arg1 *go_client.EnableJobRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableJob", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableJob indicates an expected call of EnableJob.
func (mr *MockJobServiceClientMockRecorder) EnableJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableJob", reflect.TypeOf((*MockJobServiceClient)(nil).EnableJob), varargs...)
}

// GetJob mocks base method.
func (m *MockJobServiceClient) GetJob(arg0 context.Context, arg1 *go_client.GetJobRequest, arg2 ...grpc.CallOption) (*go_client.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJob", varargs...)
	ret0, _ := ret[0].(*go_client.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobServiceClientMockRecorder) GetJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJobServiceClient)(nil).GetJob), varargs...)
}

// ListJobs mocks base method.
func (m *MockJobServiceClient) ListJobs(arg0 context.Context, arg1 *go_client.ListJobsRequest, arg2 ...grpc.CallOption) (*go_client.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(*go_client.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockJobServiceClientMockRecorder) ListJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockJobServiceClient)(nil).ListJobs), varargs...)
}
